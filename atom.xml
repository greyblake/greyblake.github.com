<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sergey Potapov]]></title>
  <link href="http://greyblake.com/atom.xml" rel="self"/>
  <link href="http://greyblake.com/"/>
  <updated>2018-02-18T19:03:19+01:00</updated>
  <id>http://greyblake.com/</id>
  <author>
    <name><![CDATA[Sergey Potapov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to fix intermittent test failures]]></title>
    <link href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/"/>
    <updated>2018-02-19T20:18:00+01:00</updated>
    <id>http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#order-dependent-tests">Intro</a></li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#order-dependent-tests">Order dependent tests</a>

<ul>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#how-to-reproduce-order-dependent-tests">How to reproduce order dependent tests?</a></li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#how-to-fix-order-dependent-tests">How to fix order dependent tests?</a></li>
</ul>
</li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#single-intermittent-tests">Single intermittent tests</a>

<ul>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#order-related-problems">Order related problems</a>

<ul>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#database-selection-without-ordering">Database selection without ordering</a></li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#unstable-sort">Unstable sort</a></li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#iterating-over-hashmap-like-structures">Iterating over HashMap-like structures</a></li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#other-order-related-problems">Other order related problems</a></li>
</ul>
</li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#time-and-timezone-related-failures">Time and timezone related failures</a></li>
</ul>
</li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#confusion">Conclusion</a></li>
<li><a href="http://greyblake.com/blog/2018/02/19/how-to-fix-intermittent-test-failures/#resources">Resources</a></li>
</ul>


<h2><a name="order-dependent-tests"></a> Intro</h2>

<p>You probably happened to face some nasty tests in your continuous integration,
that fails from to time and make your build red.
It slows down the deployment pipeline and could be very annoying.
Today I would like to dive into the nature of such tests: investigate the origin of problems,
explain how to reproduce the failures and how to fix them.</p>

<p>In my opinion, intermittent tests could be divided into two major groups: order dependent tests and intermittent tests by themselves.
I will cover both in this article.</p>

<h2><a name="order-dependent-tests"></a> Order dependent tests</h2>

<p><strong>An order dependent test is a test that always passes in isolation but fails when it runs with other tests in a particular order</strong>.</p>

<p>Example: let&#8217;s say we have tests <code>A</code> and <code>B</code>. Test <code>A</code> passes in isolation and passes
when we run sequence <code>A, B</code>, but permanently fails in sequence <code>B, A</code>.</p>

<p>Usually, it happens when test <code>B</code> does not clean up the environment properly and this in some way affects <code>A</code>.</p>

<h3><a name="how-to-reproduce-order-dependent-tests"></a> How to reproduce order dependent tests?</h3>

<p>Quite often in CI tests run in a random order. For reproduction, it&#8217;s important to know the exact order.</p>

<p>Let&#8217;s say you know from your CI logs that in a test sequence <code>A, B, C, D, E, F</code>  test <code>E</code> fails.
Most likely it fails because one of the preceding tests changes the global environment.</p>

<p>Try to run sequence <code>A, B, C, D, E</code> locally to confirm the hypothesis.
Make sure that tests run exactly in the specified order. If you&#8217;re using RSpec you need to
pass <code>--order defined</code> option.</p>

<pre><code>rspec --order defined ./a_spec.rb ./b_spec.rb ./c_spec.rb ./d_spec.rb ./e_spec.rb
</code></pre>

<p>Now how do you know which of <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code> makes <code>E</code> break? You need to experiment, running different sequences like
<code>A, E</code>, <code>B, E</code>, <code>C, E</code>, <code>D, E</code>. If there are a lot of tests it may take long, so I prefer to use binary search.
Split preceding tests into 2 groups: <code>A, B</code> and <code>C, D</code> and determine which of the following sequences fail:
<code>A, B, E</code> or <code>C, D, E</code>. Then do the same with the failing group until you get a minimal reproducible example. E.g.</p>

<pre><code>rspec --order defined ./b_spec.rb ./e_spec.rb
</code></pre>

<!--more-->


<h3><a name="how-to-fix-order-dependent-tests"></a> How to fix order dependent tests?</h3>

<p>Now you need to inspect test <code>B</code> to see where exactly it doesn&#8217;t clean up the environment.
Quite often it can be one of the following reasons:</p>

<ul>
<li>The test creates new records in the database without deleting them after.</li>
<li>The test stubs some object methods (e.g. <code>Time.now</code>) without reverting the change.</li>
</ul>


<p>It often happens with <code>Timecop</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="p">{</span> <span class="no">Timecop</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="mi">2017</span><span class="p">,</span> <span class="mo">02</span><span class="p">,</span> <span class="mi">17</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If this is forgotten, the time will be frozen for all the subsequent tests</span>
</span><span class='line'><span class="n">after</span> <span class="p">{</span> <span class="no">Timecop</span><span class="o">.</span><span class="n">return</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The test creates files in the file system and does not delete them after.</li>
<li>The test defines some classes that conflict with real classes from the code and it breaks autoloading mechanism in Rails.</li>
</ul>


<p>The latest point may not be easy to understand, so let me illustrate it with an example.
Let&#8217;s say we have <code>DummyModule</code> module that we want to test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DummyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dummy</span>
</span><span class='line'>    <span class="s2">&quot;dummy&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test may look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">DummyModule</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">DummyService</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">DummyModule</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span><span class="p">(</span><span class="ss">:service</span><span class="p">)</span> <span class="p">{</span> <span class="no">DummyService</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;includes dummy method&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">service</span><span class="o">.</span><span class="n">dummy</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;dummy&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what&#8217;s wrong with it? It creates a new global constant named <code>DummyService</code>.
The constant lives even when the test ends. If you define <code>DummyService</code> in multiple tests they overlap
and may have side effects. Or if you have real <code>DummyService</code> class in you rails app in <code>app/services/dummy_service.rb</code>,
and you run a test sequence, where <code>dummy_service_spec.rb</code> follows <code>dummy_module_spec.rb</code>, you may get an order
dependent test.</p>

<p>Since <code>DummyService</code> is already defined in <code>dummy_module_spec.rb</code> rails autoload will never try to load
<code>app/service/dummy_service.rb</code> file and as result <code>dummy_service_spec.rb</code> will fail, because
it tests a wrong version of <code>DummyService</code> (defined in <code>dummy_module_spec.rb</code>).</p>

<p>To test such modules you should prefer to use anonymous classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">DummyModule</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span><span class="p">(</span><span class="ss">:service</span><span class="p">)</span> <span class="p">{</span> <span class="n">dummy_class</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:dummy_class</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>      <span class="kp">include</span> <span class="no">DummyModule</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;includes dummy method&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">service</span><span class="o">.</span><span class="n">dummy</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;dummy&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Such test does not pollute global environment.</p>

<h2><a name="single-intermittent-tests"></a> Single intermittent tests</h2>

<h3><a name="order-related-problems"></a> Order related problems</h3>

<p>Sometimes programming languages and databases have undefined behavior regarding
order related operations. We, developers, may make wrong assumptions about it
and introduce a bug or an intermittent test.
Fortunately, those issues are often easy to spot and fix.</p>

<h4><a name="database-selection-without-ordering"></a> Database selection without ordering</h4>

<p>Most of the databases do not guarantee an order of returned items unless it&#8217;s explicitly specified in the request.
You should always keep this in mind if your test relies on a specific order.</p>

<p>Assume we have an ActiveRecord model <code>User</code> and we want to write a test for
<code>fetch_all_users</code> function, which returns all existing records from the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fetch_all_users</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;fethes all existing records&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Anthony&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Ahmed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Paulo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Max&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Ricardo&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">names</span> <span class="o">=</span> <span class="n">fetch_all_users</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">names</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="s2">&quot;Anthony&quot;</span><span class="p">,</span> <span class="s2">&quot;Ahmed&quot;</span><span class="p">,</span> <span class="s2">&quot;Paulo&quot;</span><span class="p">,</span> <span class="s2">&quot;Max&quot;</span><span class="p">,</span> <span class="s2">&quot;Ricardo&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance, this test may look innocent. And it will probably pass if you try to run it.
I had to loop the test and run it about 5000 times to reproduce one single failure
(with PostgreSQL 9.5, and RSpec option <code>use_transactional_fixtures</code> set to <code>false</code>):</p>

<pre><code>1) fethes all existing records
   Failure/Error: expect(names).to eq ["Anthony", "Ahmed", "Paulo", "Max", "Ricardo"]

     expected: ["Anthony", "Ahmed", "Paulo", "Max", "Ricardo"]
          got: ["Max", "Ricardo", "Anthony", "Ahmed", "Paulo"]
</code></pre>

<p>There are two possible solutions to make the test stable.</p>

<p>First one is to modify <code>fetch_all_users</code> to enforce the order of returned items:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fetch_all_users</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second one, if you really don&#8217;t care about the order,
is to update the test to be order-agnostic.
With RSpec you can use <a href="http://www.rubydoc.info/gems/rspec-expectations/RSpec/Matchers#contain_exactly-instance_method">contain_exactly</a>
matcher for that. As the documentation says:</p>

<blockquote><p>Passes if actual contains all of the expected regardless of order.</p></blockquote>


<p>So the expectation statement becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">names</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">contain_exactly</span><span class="p">(</span><span class="s2">&quot;Anthony&quot;</span><span class="p">,</span> <span class="s2">&quot;Ahmed&quot;</span><span class="p">,</span> <span class="s2">&quot;Paulo&quot;</span><span class="p">,</span> <span class="s2">&quot;Max&quot;</span><span class="p">,</span> <span class="s2">&quot;Ricardo&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="unstable-sort"></a> Unstable sort</h4>

<p>You should learn the difference between stable and unstable sorting algorithms and know which one
is used by default in your programming language and your database.</p>

<p>Let&#8217;s take a look at an example with a stable sorting algorithm.
Here we have 3 people, 2 of them have the same age. We&#8217;re gonna sort people by age.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Reproduced on MRI 2.4.2 which has a stable sorting algorithm.</span>
</span><span class='line'><span class="c1"># NOTE: different ruby implementation and versions use different sort algorithms be default.</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">&lt;=&gt;</span> <span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;=&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">people_set1</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Bernard&quot;</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
</span><span class='line'>  <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Johannes&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
</span><span class='line'>  <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Steffen&quot;</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Bernard precedes Steffen (as in the input data set)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">people_set1</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;Johannes&quot;, &quot;Bernard&quot;, &quot;Steffen&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now let&#39;s swap Bernard and Steffen</span>
</span><span class='line'><span class="n">people_set2</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Steffen&quot;</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
</span><span class='line'>  <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Johannes&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
</span><span class='line'>  <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Bernard&quot;</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now Steffen precedes Bernard</span>
</span><span class='line'><span class="nb">p</span> <span class="n">people_set2</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;Johannes&quot;, &quot;Steffen&quot;, &quot;Bernard&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Stable sorting algorithms retain the relative order of items with equal keys</strong>.</p>

<p>As you may conclude, unstable sorting algorithms are those, that do not match the
definition of &#8220;stable sorting algorithm&#8221;.</p>

<p>However, there are 2 possible types of unstable sorting algorithms:</p>

<ul>
<li>Those that persist the same output for the same given input</li>
<li>Those that may return different output when the same input is given</li>
</ul>


<p>The second is not desired and must be avoided since it introduces
a real randomness. An example could be a <a href="https://en.wikipedia.org/wiki/Quicksort">quicksort</a>
implementation with literally randomly chosen pivot.</p>

<p>Most of the languages have the first type of unstable sort. But it&#8217;s good to be on the alert.</p>

<p>By the way, if you wonder what kind of sorting algorithm has your Ruby version,
I recommend you to take a look at this <a href="https://stackoverflow.com/a/44486562/1013173">stackoverflow answer</a>.</p>

<h4><a name="iterating-over-hashmap-like-structures"></a> Iterating over HashMap-like structures</h4>

<p>HashMap-like structures are widely used in many scripting languages: in Ruby it&#8217;s called &#8220;hash&#8221;, in JavaScript - &#8220;object&#8221;,
in Python - &#8220;dictionary&#8221;, in PHP - &#8220;associated array&#8221;, etc.</p>

<p>The problem is, some implementations do not guarantee order persistence on iteration over HashMap keys.
For example it was the case for Ruby before version 1.9, that&#8217;s why ActiveSupport used to have
<a href="http://api.rubyonrails.org/v3.2/classes/ActiveSupport/OrderedHash.html">OrderedHash</a>.</p>

<p>In case of JavaScript <a href="http://2ality.com/2015/10/property-traversal-order-es6.html">the traversion order was only defined in ES6</a>.</p>

<p>Here is a little Rust program, that illustrates the issue with an equivalent Ruby code in
the comments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Reproduced with rust version 1.22.1</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashMap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// hash = { 1 =&gt; 1, 2 =&gt; 4 }</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="n">hash</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">hash</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// keys = hash.keys</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">keys</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="k">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">hash</span><span class="p">.</span><span class="n">keys</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="o">*</span><span class="n">x</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// expect(keys).to eq [1, 2]</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run this program multiple times, sometimes it may succeed, sometimes it fails:</p>

<pre><code>thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `[2, 1]`,
 right: `[1, 2]`', src/main.rs:16:4
</code></pre>

<p>The solution is the same as for the previous order related problems.
Either to update the code to sort keys explicitly or to make the test be order agnostic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// keys = hash.keys</span>
</span><span class='line'><span class="k">let</span> <span class="k">mut</span> <span class="n">keys</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="k">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">hash</span><span class="p">.</span><span class="n">keys</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="o">*</span><span class="n">x</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// keys.sort!</span>
</span><span class='line'><span class="n">keys</span><span class="p">.</span><span class="n">sort</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// expect(keys).to eq [1, 2]</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="other-order-related-problems"></a> Other order related problems</h4>

<p>Everything that has not 100% defined behavior may lead to the similar issues.
There are few other examples:</p>

<ul>
<li>Iterating over entries in the file system may vary depending on a file system, operating system, file system drivers, etc.</li>
<li>If you run concurrent operations they are not guaranteed to finish in the order they start. So you may want to do some kind of sorting to aggregate the final result.</li>
</ul>


<h3><a name="time-and-timezone-related-failures"></a> Time and timezone related failures</h3>

<p>Tests should not depend on current time and date.</p>

<p>It&#8217;s not obvious, but sometime a test may fail on CI just because it runs in a specific time in a
specific (different from your local) timezone. E.g. it may fail in time frame from 20:00 to 00:00
in CI server that runs in Pacific Time Zone, but the failure may not be reproducible in Europe.</p>

<p>If you suspect this, the first step would be to change your local time settings in order to
reproduce the same time conditions as on the CI server, when the test failed.</p>

<p>After you&#8217;re able to reproduce the failure locally it must be relatively easy to debug.</p>

<p>Another example of a test that depends on the current time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_year</span>
</span><span class='line'>  <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">year</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;returns current year&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">current_year</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2018</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, on the 1st of January 2019 it will start failing.
For this test you&#8217;d need to stub the current time with <a href="https://github.com/travisjeffery/timecop">Timecop</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;returns current year&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Timecop</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">current_year</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2018</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a name="confusion"></a> Conclusion</h2>

<p>We have covered the most common cases where an intermittent test can be
introduced to a smooth CI process. However, some situations may be tricker and tests may fail
only when multiple of the covered factors combined together.</p>

<p>Usually, it is better to spot problems on the code review stage,
at least by now you should know what you should pay attention to.</p>

<p>Also it worth saying, that the article does not cover problems related to concurrency and asynchronous
communication which are very big topics by themselves.</p>

<p>Thanks for reading please give me feedback.
What was the toughest intermittent you had to debug? =)</p>

<h2><a name="resources"></a> Resources</h2>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/QA/Avoiding_intermittent_oranges">Avoiding intermittent test failures</a></li>
<li><a href="https://8thlight.com/blog/will-warner/2013/03/26/stable-sorting-in-ruby.html">Stable Sorting in Ruby</a></li>
<li><a href="https://stackoverflow.com/a/44486562/1013173">Comparison of different ruby implementations for sorting stability</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust 2018]]></title>
    <link href="http://greyblake.com/blog/2018/01/16/rust-2018/"/>
    <updated>2018-01-16T00:08:00+01:00</updated>
    <id>http://greyblake.com/blog/2018/01/16/rust-2018</id>
    <content type="html"><![CDATA[<p>With this post, I would like to give my feedback to the rust community in the
scope of <a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html">A Call for Community Blogposts</a>.</p>

<p>This article is structured in the following way:</p>

<ul>
<li>A little bit of my background</li>
<li>Things that I like in Rust.</li>
<li>Things that I miss or things that can be improved.</li>
</ul>


<h2>My background</h2>

<p>For the last 10 years, my main programming language is Ruby and my main working area is web development.
I started hacking Rust about 1.5 years ago, as you may guess it&#8217;s not very typical for web developers
to jump to system programming languages. So my perception is quite different from the majority who comes
with C++ or Java background.</p>

<p>I&#8217;ve decided to learn Rust by doing: I search for a vacuum in the ecosystem and pick some little libraries
that seem interesting to me and realistic to implement and maintain for one person. You can find them
on <a href="https://github.com/greyblake?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=rust">github</a>.</p>

<p>Apart from that, I&#8217;ve implemented a little framework to develop and test trading strategies and
an arbitrage bot for cryptocurrencies. Those are quick&#8217;n&#8217;dirty projects, where I&#8217;ve just tried to prototype
ideas.</p>

<h2>What I found awesome about Rust?</h2>

<p>Here is just a short list of things:</p>

<ul>
<li>Type safety</li>
<li>Package management with cargo</li>
<li>Pattern matching</li>
<li>Meaningful and helpful error messages (I could see how it was improved during last 1.5 years)</li>
<li>Doc tests</li>
<li>Dead code warnings</li>
<li>Community and the way Mozilla organizes the work</li>
<li>Performance</li>
<li>Language syntax and its expressiveness</li>
<li>Ability to write low-level as well as high-level code.</li>
<li>Usage of <code>!</code> to indicate a magic behind macros</li>
</ul>


<p>Every point here deserves its own discussion but in this post, I&#8217;d like to focus on the
stuff that can be improved.</p>

<h2>Improvement points</h2>

<p>Here is just a list of things that I sometimes miss in Rust.</p>

<h3>TryFrom and TryInto traits</h3>

<p>Quite often I need to convert one type into another with possible failure. An idiomatic way to do this
would be using <a href="https://github.com/rust-lang/rust/issues/33417">TryFrom<T> and TryInto<T></a> traits,
but they are not stable yet. Those are just like
<a href="https://doc.rust-lang.org/std/convert/trait.Into.html">From<T> and Into<T></a> but return <code>Result</code>.
Hope they will be stabilized soon.</p>

<h3>Parametrization of generic types with constants</h3>

<p>I don&#8217;t know is there an RFC for this already, but it would be nice to be able to pass constants like <code>usize</code>
(maybe some others) to generic types.
Let&#8217;s say I want to implement a structure to calculate <a href="https://en.wikipedia.org/wiki/Moving_average">moving average</a> of
length <code>SIZE</code>. The pseudo-code may look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">struct</span> <span class="n">MovingAverage</span><span class="o">&lt;</span><span class="n">SIZE</span><span class="o">:</span> <span class="n">usize</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">array</span><span class="o">:</span> <span class="p">[</span><span class="n">SIZE</span><span class="p">;</span> <span class="k">f64</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ma</span><span class="o">:</span> <span class="n">MovingAverage</span><span class="o">&lt;</span><span class="m">10</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">MovingAverage</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: for this particular case one can come up with a workaround parameterizing <code>MovingAverage</code> with an array type.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">struct</span> <span class="n">MovingAverage</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">array</span><span class="o">:</span> <span class="n">T</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ma</span><span class="o">:</span> <span class="n">MovingAverage</span><span class="o">&lt;</span><span class="p">[</span><span class="m">10</span><span class="p">;</span> <span class="k">f64</span><span class="p">]</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">MovingAverage</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Shared trait bounds</h3>

<p>Sometimes when I deal with generic types and there are too many trait bounds, the code
gets monstrous, and the worst is that I need to duplicate it.</p>

<p>Consider the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">A</span><span class="o">:</span> <span class="n">X</span><span class="p">,</span> <span class="n">B</span><span class="o">:</span> <span class="n">Y</span><span class="p">,</span> <span class="n">C</span><span class="o">:</span> <span class="n">Z</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Foo</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&gt;</span>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">A</span><span class="o">:</span> <span class="n">X</span><span class="p">,</span> <span class="n">B</span><span class="o">:</span> <span class="n">Y</span><span class="p">,</span> <span class="n">C</span><span class="o">:</span> <span class="n">Z</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Bar</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&gt;</span>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="o">&lt;</span><span class="n">B</span><span class="o">:</span> <span class="n">Y</span><span class="p">,</span> <span class="n">C</span><span class="o">:</span> <span class="n">Z</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Baz</span><span class="o">&lt;</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be cool to be able to define the trait bounds only once
for implementation of all structures, like in the following pseudo-code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">scope</span><span class="o">&lt;</span><span class="n">A</span><span class="o">:</span> <span class="n">X</span><span class="p">,</span> <span class="n">B</span><span class="o">:</span> <span class="n">Y</span><span class="p">,</span> <span class="n">C</span><span class="o">:</span> <span class="n">Z</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">impl</span> <span class="k">for</span> <span class="n">Foo</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">impl</span> <span class="k">for</span> <span class="n">Bar</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">impl</span> <span class="k">for</span> <span class="n">Baz</span><span class="o">&lt;</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Crazy generic types are hard to read in error messages</h3>

<p>If one happens to work with a big chain of iterators or futures, they could see error messages with
huge dreadful generic types.</p>

<p>I&#8217;ll take one relatively simple example from <a href="https://www.reddit.com/r/rust/comments/5ovjwp/need_help_to_understand_futuretokio/">reddit</a> to
illustrate what I mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="o">--&gt;</span> <span class="n">examples</span><span class="err">\</span><span class="n">echo_client_server</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">51</span><span class="o">:</span><span class="m">22</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="m">51</span> <span class="o">|</span>                     <span class="p">.</span><span class="n">boxed</span><span class="p">()</span>
</span><span class='line'>   <span class="o">|</span>                      <span class="o">^^^^^</span> <span class="n">within</span> <span class="err">`</span><span class="n">futures</span><span class="o">::</span><span class="n">AndThen</span><span class="o">&lt;</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">futures</span><span class="o">::</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="p">,</span> <span class="n">Item</span><span class="o">=</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">line</span><span class="o">::</span><span class="n">Client</span><span class="o">&gt;&gt;</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">marker</span><span class="o">::</span><span class="n">Send</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">futures</span><span class="o">::</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">futures</span><span class="o">::</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="p">,</span> <span class="n">Item</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[</span><span class="n">closure</span><span class="o">@</span><span class="n">examples</span><span class="err">\</span><span class="n">echo_client_server</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">46</span><span class="o">:</span><span class="m">34</span><span class="o">:</span> <span class="m">49</span><span class="o">:</span><span class="m">30</span> <span class="n">client</span><span class="o">:</span><span class="n">_</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">[</span><span class="n">closure</span><span class="o">@</span><span class="n">examples</span><span class="err">\</span><span class="n">echo_client_server</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">44</span><span class="o">:</span><span class="m">32</span><span class="o">:</span> <span class="m">50</span><span class="o">:</span><span class="m">22</span> <span class="n">i</span><span class="o">:</span><span class="n">_</span><span class="p">]</span><span class="o">&gt;</span><span class="err">`</span><span class="p">,</span> <span class="n">the</span> <span class="n">trait</span> <span class="err">`</span><span class="n">std</span><span class="o">::</span><span class="n">marker</span><span class="o">::</span><span class="n">Send</span><span class="err">`</span> <span class="n">is</span> <span class="n">not</span> <span class="n">implemented</span> <span class="k">for</span> <span class="err">`</span><span class="n">futures</span><span class="o">::</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="p">,</span> <span class="n">Item</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s quite hard to understand the data type from the first glance.
I prefer manually to reformat such complex types into the readable multi-line representation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">futures</span><span class="o">::</span><span class="n">AndThen</span><span class="o">&lt;</span>
</span><span class='line'>    <span class="n">Box</span><span class="o">&lt;</span>
</span><span class='line'>        <span class="n">futures</span><span class="o">::</span><span class="n">Future</span><span class="o">&lt;</span>
</span><span class='line'>            <span class="n">Error</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Item</span><span class="o">=</span><span class="n">Box</span><span class="o">&lt;</span><span class="n">line</span><span class="o">::</span><span class="n">Client</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&gt;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">marker</span><span class="o">::</span><span class="n">Send</span>
</span><span class='line'>    <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">futures</span><span class="o">::</span><span class="n">Map</span><span class="o">&lt;</span>
</span><span class='line'>        <span class="n">Box</span><span class="o">&lt;</span>
</span><span class='line'>            <span class="n">futures</span><span class="o">::</span><span class="n">Future</span><span class="o">&lt;</span>
</span><span class='line'>                <span class="n">Error</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Item</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">String</span>
</span><span class='line'>            <span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span><span class="n">closure</span><span class="o">@</span><span class="n">examples</span><span class="err">\</span><span class="n">echo_client_server</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">46</span><span class="o">:</span><span class="m">34</span><span class="o">:</span> <span class="m">49</span><span class="o">:</span><span class="m">30</span> <span class="n">client</span><span class="o">:</span><span class="n">_</span><span class="p">]</span>
</span><span class='line'>    <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span><span class="n">closure</span><span class="o">@</span><span class="n">examples</span><span class="err">\</span><span class="n">echo_client_server</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">44</span><span class="o">:</span><span class="m">32</span><span class="o">:</span> <span class="m">50</span><span class="o">:</span><span class="m">22</span> <span class="n">i</span><span class="o">:</span><span class="n">_</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it would be nice if <code>rustc</code> could emit similar error messages for me.</p>

<h3>Large source files</h3>

<p>I&#8217;ve noticed many popular Rust libraries including the standard library contain large source files (> 1000 LOC).
Probably it&#8217;s a question of taste, however I would prefer to keep things in the more granular way: one
entity (structure + functions) per file. In my opinion, when a code base is organized like this it&#8217;s easier to
read and maintain.</p>

<h3>More Rust in production</h3>

<p>It would be pleasant to see more production usage of Rust in 2018 and more
new job positions for Rust developers opened =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run Rust tests automatically]]></title>
    <link href="http://greyblake.com/blog/2017/09/02/how-to-run-rust-tests-automatically/"/>
    <updated>2017-09-02T20:13:00+02:00</updated>
    <id>http://greyblake.com/blog/2017/09/02/how-to-run-rust-tests-automatically</id>
    <content type="html"><![CDATA[<p>If you prefer to use TDD approach to write Rust code like I do, you would need a fast feedback from your tests.</p>

<p><img src="http://articles.tbscg.com/wp-content/uploads/2015/11/tdd-cycle-300x235.png" alt="TDD cycle" /></p>

<p>Running <code>cargo test</code> every time you change a code base, quickly becomes a routine task.
But you can automate this using <a href="https://github.com/passcod/cargo-watch">cargo-watch</a> plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cargo watch -x test</span></code></pre></td></tr></table></div></figure>


<p>Now <code>cargo test</code> will run automatically on every change in the source files.</p>

<p>However it can be still inconvenient, because you need to switch between your text editor and a terminal to see a result.</p>

<p>To overcome the problem we can use desktop notifications, so I&#8217;ve decided to create
another small cargo plugin <a href="https://github.com/greyblake/cargo-testify">cargo-testify</a>.</p>

<p>You can install it with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cargo install cargo-testify</span></code></pre></td></tr></table></div></figure>


<p>And then run it within your rust project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cargo testify</span></code></pre></td></tr></table></div></figure>


<p>It detects changes in source files, run tests, and shows friendly desktop notifications, just like in the GIF below:</p>

<p><img src="https://raw.githubusercontent.com/greyblake/cargo-testify/master/artifacts/demo.gif" alt="cargo-testify" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Crystalium organization]]></title>
    <link href="http://greyblake.com/blog/2017/08/20/announcing-crystalium-organization/"/>
    <updated>2017-08-20T13:04:00+02:00</updated>
    <id>http://greyblake.com/blog/2017/08/20/announcing-crystalium-organization</id>
    <content type="html"><![CDATA[<p>Hello, dear Crystal community!</p>

<p>I discovered Crystal in December 2015. It was so exciting, I wanted to learn!
And the best way to learn a programming language is to use it. So I started looking for what
is missed in the Crystal ecosystem and what would be interesting for me to implement.
That&#8217;s how I ended up with 6-8 crystal projects in my github account, that seem to be used
by other people.</p>

<p>Since that my life and my interests have changed. My focus moved to different things I&#8217;d like learn,
and I see I don&#8217;t have enough time to maintain properly the projects I started.
Some of them have opened issues and pull requests for pretty long time. I thought I will address them
in few days.. or in few weeks.. But months passed and this has not happened. So I have to apologize.</p>

<p>I recall &#8220;The Cathedral and the Bazaar&#8221; book by Eric S. Raymond, who said that if one can not maintain
an open source project it should be transferred to anther maintainer if possible.</p>

<p>So I&#8217;ve decided to create <a href="https://github.com/crystalium">Crystalium</a> github organization,
where I moved some of my projects:</p>

<ul>
<li><a href="https://github.com/crystal-community/icr">icr</a> - Interactive console for Crystal programming language</li>
<li><a href="https://github.com/crystal-community/cossack">cossack</a> - HTTP client with middleware support</li>
<li><a href="https://github.com/crystal-community/jwt">jwt</a> - JSON web tokens implemented in Crystal</li>
<li><a href="https://github.com/crystal-community/kiwi">kiwi</a> - unified interface for key-value stores</li>
<li><a href="https://github.com/crystal-community/leveldb">leveldb</a> - Crystal bindings for LevelDB</li>
<li><a href="https://github.com/crystal-community/bloom_filter">bloom_filter</a> - bloom filter implementation</li>
</ul>


<p>If you&#8217;d like to become a member of the organization and maintain
some of these projects in collaboration with others
please let me know by sending an email to blake131313 at gmail.</p>

<p>If you are a designer and you&#8217;d like to create a logo you are welcome as well.</p>

<p>Thanks!</p>

<p>UPDATE:</p>

<p>I got an invitation to move the projects to <a href="https://github.com/crystal-community">crystal-community</a>
what makes sense to me. I believe it&#8217;s a better option, than creating another separate organization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposing a Rust library to C]]></title>
    <link href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/"/>
    <updated>2017-08-10T10:16:00+02:00</updated>
    <id>http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#intro">Intro</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#hello-from-rust-example">Hello from Rust example</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#naming-conventions">Naming conventions</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#plain-enums">Representing plain enums</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#strings">Strings</a>

<ul>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#passing-a-string-to-a-function">Passing a string to a function</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#returning-a-string-from-a-function">Returning a string from a function</a></li>
</ul>
</li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#structs">Dealing with structures</a>

<ul>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#representing-a-structure">Representing a structure</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#returning-a-structure">Returning a structure</a></li>
</ul>
</li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#complex-enums">Complex enums?</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#conclusion">Conclusion</a></li>
<li><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/#links">Links</a></li>
</ul>


<h2><a name="intro"></a> Intro</h2>

<p>Recently I&#8217;ve ported <a href="https://github.com/greyblake/whatlang-rs">whatlang</a> library to C (<a href="https://github.com/greyblake/whatlang-ffi">whatlang-ffi</a>)
and I&#8217;d like to share some experience.</p>

<p>DISCLAIMER: I am not a professional C/C++ developer, so it means:</p>

<ul>
<li>I will describe some things that may look very obvious.</li>
<li>The outcome probably will not be a 100% idiomatic C code.</li>
<li>If you know how some things can be done better, please let me know by writing a comment.</li>
</ul>


<h2><a name="hello-from-rust-example"></a> Hello from Rust example</h2>

<p>First let&#8217;s make a minimal C program, that calls Rust.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cargo new whatlang-ffi
</span><span class='line'>cd whatlang-ffi
</span><span class='line'>mkdir examples</span></code></pre></td></tr></table></div></figure>


<p>Add this to <code>Cargo.toml</code>:</p>

<pre><code>[lib]
name = "whatlang"
crate-type = ["staticlib", "cdylib"]
</code></pre>

<p>It tells cargo that we want to compile a static library and get <code>.so</code> object.</p>

<p>In <code>src/lib.rs</code> we implement a small function that prints a message to stdout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[no_mangle]</span>
</span><span class='line'><span class="n">pub</span> <span class="n">extern</span> <span class="k">fn</span> <span class="n">print_hello_from_rust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello from Rust&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>To explain <code>#[no_mangle]</code> and <code>extern</code> let me extract some quotes from:
<a href="https://mgattozzi.com/haskell-rust">FFI with Haskell and Rust</a> article:</p>

<blockquote><p>The #[no_mangle] tells the Rust compiler not to do anything weird with the symbols of this function when compiled because we need to be able to call it from other languages.<br/>This is needed if you plan on doing any FFI. Not doing so means you won&#8217;t be able to reference it in other languages</p></blockquote>




<blockquote><p>extern means this is externally available outside our library and tells the compiler to follow the C calling convention when compiling</p></blockquote>


<p>Let&#8217;s compile our lib:</p>

<pre><code>cargo build --release
</code></pre>

<p>It creates <code>target/release/libwhatlang.so</code> file.</p>

<p>Now using <code>nm</code> tool we can check that <code>libwhatlang.so</code> really contains <code>print_hello_from_rust()</code> function:</p>

<pre><code>nm -D ./target/release/libwhatlang.so  | grep hello
0000000000003190 T print_hello_from_rust
</code></pre>

<p>Then we need <code>src/whatlang.h</code> header file with a function declaration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">print_hello_from_rust</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally a C program itself (we put it into <code>examples/hello.c</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;whatlang.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print_hello_from_rust</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s compile!</p>

<pre><code>gcc -o ./examples/hello ./examples/hello.c -Isrc  -L. -l:target/release/libwhatlang.so
</code></pre>

<p>This produces <code>examples/hello</code> binary, which we can run:</p>

<pre><code>./examples/hello
Hello from Rust
</code></pre>

<p>During the development process we&#8217;ll likely need to recompile and run the program frequently.
To automate this let&#8217;s create a <code>Makefile</code> with few commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GCC_BIN</span> <span class="o">?=</span> <span class="err">$</span><span class="p">(</span><span class="n">shell</span> <span class="n">which</span> <span class="n">gcc</span><span class="p">)</span>
</span><span class='line'><span class="n">CARGO_BIN</span> <span class="o">?=</span> <span class="err">$</span><span class="p">(</span><span class="n">shell</span> <span class="n">which</span> <span class="n">cargo</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nl">run:</span> <span class="n">clean</span> <span class="n">build</span>
</span><span class='line'>  <span class="p">.</span><span class="o">/</span><span class="n">examples</span><span class="o">/</span><span class="n">hello</span>
</span><span class='line'><span class="nl">clean:</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="n">CARGO_BIN</span><span class="p">)</span> <span class="n">clean</span>
</span><span class='line'>  <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="p">.</span><span class="o">/</span><span class="n">examples</span><span class="o">/</span><span class="n">hello</span>
</span><span class='line'><span class="nl">build:</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="n">CARGO_BIN</span><span class="p">)</span> <span class="n">build</span> <span class="o">--</span><span class="n">release</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="n">GCC_BIN</span><span class="p">)</span> <span class="o">-</span><span class="n">o</span> <span class="p">.</span><span class="o">/</span><span class="n">examples</span><span class="o">/</span><span class="n">hello</span> <span class="p">.</span><span class="o">/</span><span class="n">examples</span><span class="o">/</span><span class="n">hello</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">Isrc</span>  <span class="o">-</span><span class="n">L</span><span class="p">.</span> <span class="o">-</span><span class="n">l</span><span class="o">:</span><span class="n">target</span><span class="o">/</span><span class="n">release</span><span class="o">/</span><span class="n">libwhatlang</span><span class="p">.</span><span class="n">so</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can run <code>make run</code> to recompile <code>lib.rs</code>, <code>hello.c</code> and run <code>hello</code> binary.</p>

<p>In the rest for the article I&#8217;ll go through common problems, design decisions and pitfalls I faced.</p>

<h2><a name="naming-conventions"></a>Naming conventions</h2>

<p>Since C does not have namespaces (some people may <a href="https://stackoverflow.com/questions/4396140/why-doesnt-ansi-c-have-namespaces">disagree</a>)
I had to stick to some rules in order to avoid name collision with other libraries and confusion:</p>

<ul>
<li>Every function, type or constant starts with <code>&lt;library&gt;_</code> prefix. Examples: <code>whatlang_detect()</code>, <code>whatlang_lang</code>.</li>
<li>If a function is associated with a particular format then its name has format  <code>&lt;library&gt;_&lt;type&gt;_&lt;name&gt;</code>. Example: <code>whatlang_lang_code()</code>.</li>
</ul>


<p>Similar logic rules apply to everything else. It may seem too verbose,
but as I see it&#8217;s a pretty common approach for many C libraries.</p>

<h2><a name="plain-enums"></a> Representing plain enums</h2>

<p>In whatlang I have enum <a href="https://docs.rs/whatlang/0.4.1/whatlang/enum.Lang.html">Lang</a>, which
is probably is main entity in the library. First  I had to add <a href="https://doc.rust-lang.org/nomicon/other-reprs.html#reprc"><code>#[repr(C)]</code></a>
to make rust compiler represent the data in memory in the same way as C does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[repr(C)]</span>
</span><span class='line'><span class="n">pub</span> <span class="k">enum</span> <span class="n">Lang</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Aka</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Amh</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Arb</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// and so on</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Lang</code> represents 83 different languages, which can be encoded with 1 byte.
That was my initial assumption an it seemed to be correct, until later I uncovered some bugs.</p>

<p>I decided to convert Lang enum into <code>u8</code> with <a href="https://doc.rust-lang.org/std/mem/fn.transmute.html">std::mem::transmute</a> function,
in order to figure out how it&#8217;s encoded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">lang_int</span><span class="o">:</span> <span class="k">u8</span> <span class="o">=</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">(</span><span class="n">Lang</span><span class="o">::</span><span class="n">Eng</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;lang_int = {:?}&quot;</span><span class="p">,</span> <span class="n">lang_int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>and got the following error:</p>

<pre><code>= note: source type: whatlang::Lang (32 bits)
= note: target type: u8 (8 bits)
</code></pre>

<p>Wow! So, actually the enum takes 4 bytes, instead of 1.
Replacing <code>u8</code> with <code>u32</code> makes things work as expected:</p>

<pre><code>lang_int = 14
</code></pre>

<p>Now it make sense, because English is on 15th position in the Lang declaration
(remember, counting starts with 0).</p>

<p>So in C such enum can be mapped to <code>uint32_t</code> type from <code>stdint.h</code>.
To define all the language I ended up with such list of constants:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">uint32_t</span> <span class="n">WHATLANG_LANG_AKA</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">uint32_t</span> <span class="n">WHATLANG_LANG_AMH</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">uint32_t</span> <span class="n">WHATLANG_LANG_ARB</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="c1">// and so on</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s quite verbose, so one would rather use scripting a language to generate such boilerplate code.</p>

<p>UPDATE: later I figured out, that actually without <code>#[repr(C)]</code> Rust optimizes memory and
uses 1 byte for <code>Lang</code> enum. So <code>uint32_t</code> can be replaced with <code>uint8_t</code>. It should work
as far as number of enum variants does not exceed 256.</p>

<h3>Returning a structure from a function</h3>

<h2><a name="strings"></a> Strings</h2>

<p>First I recommend you to read the docs for <a href="https://doc.rust-lang.org/std/ffi/struct.CStr.html">std::ffi::CStr</a>
and <a href="https://doc.rust-lang.org/std/ffi/struct.CString.html">std::ffi::String</a>
from the standard library. Those types exist to represent C strings in Rust.</p>

<h3><a name="passing-a-string-to-a-function"></a> Passing a string to a function</h3>

<p>From C side it&#8217;s relative simple: just pass a pointer to a string, like it&#8217;s done here with argument <code>text</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">uint8_t</span> <span class="nf">whatlang_detect</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">text</span><span class="p">,</span> <span class="k">struct</span> <span class="n">whatlang_info</span><span class="o">*</span> <span class="n">info</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>On Rust side you&#8217;ll need to convert a pointer into <code>&amp;str</code> or <code>String</code> so you can manipulate the data as a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ffi</span><span class="o">::</span><span class="n">CStr</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">os</span><span class="o">::</span><span class="n">raw</span><span class="o">::</span><span class="n">c_char</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pub</span> <span class="n">extern</span> <span class="k">fn</span> <span class="n">whatlang_detect</span><span class="p">(</span><span class="n">ptr</span><span class="o">:</span> <span class="o">*</span><span class="k">const</span> <span class="n">c_char</span><span class="p">,</span> <span class="n">info</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Info</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">u8</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cstr</span> <span class="o">=</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">CStr</span><span class="o">::</span><span class="n">from_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">match</span> <span class="n">cstr</span><span class="p">.</span><span class="n">to_str</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Here `s` is regular `&amp;str` and we can work with it</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// handle the error</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example above the function accepts a raw pointer <code>*const c_char</code> (it can be also <code>*mut c_char</code> if you need to mutate data).
Then we transform it into <code>CStr</code> calling unsafe method <code>CStr::from_ptr(ptr)</code>.
Finally we&#8217;re calling <code>CStr::to_str(&amp;self)</code> function, which converts C string into <code>&amp;str</code>.
This operation may fail, if the C string does not contain a valid UTF-8 sequence.</p>

<h3><a name="returning-a-string-from-a-function"></a> Returning a string from a function</h3>

<p><code>Lang</code> provides some methods that return static strings, like <code>eng_name()</code> to get language name in English.
Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">Eng</span><span class="o">::</span><span class="n">Rus</span><span class="p">.</span><span class="n">eng_name</span><span class="p">(),</span> <span class="s">&quot;Russian&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>My first thought was &#8220;I just can return a raw pointer to the string&#8221;, so the initial solution was like:</p>

<p>C function declaration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="nf">whatlang_lang_eng_name</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">lang</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rust implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[no_mangle]</span>
</span><span class='line'><span class="n">pub</span> <span class="n">extern</span> <span class="k">fn</span> <span class="n">whatlang_lang_eng_name</span><span class="p">(</span><span class="n">lang</span><span class="o">:</span> <span class="n">Lang</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">*</span><span class="k">const</span> <span class="k">u8</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lang</span><span class="p">.</span><span class="n">eng_name</span><span class="p">().</span><span class="n">as_ptr</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there is problem. C expects strings to be terminated with <code>\0</code> character, while  Rust actually
organizes static strings in a different way.
When I expected the output to be simple <code>Russian</code>, the output was the entire massive of static data:</p>

<pre><code>RussianRundiRomanianPortuguesePolishPersianPunjabiOromoOriya....
</code></pre>

<p>So, I&#8217;ve decided that I actually need to copy string from Rust static memory and ensure that
<code>\0</code> is added.</p>

<p>So I came up with the following function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">whatlang_lang_eng_name</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">lang</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now user needs to pass a pointer to a buffer, where result must be written.</p>

<p>Rust implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">libc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[no_mangle]</span>
</span><span class='line'><span class="n">pub</span> <span class="n">extern</span> <span class="k">fn</span> <span class="n">whatlang_lang_code</span><span class="p">(</span><span class="n">lang</span><span class="o">:</span> <span class="n">Lang</span><span class="p">,</span> <span class="n">buffer_ptr</span><span class="o">:</span> <span class="o">*</span><span class="k">mut</span> <span class="n">c_char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Here unwrap is safe, because whatlang always returns a valid &amp;str</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">CString</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">lang</span><span class="p">.</span><span class="n">code</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">libc</span><span class="o">::</span><span class="n">strcpy</span><span class="p">(</span><span class="n">buffer_ptr</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we convert <code>&amp;str</code> into <code>CString</code>. Then we use <code>libc::strcpy</code> from <a href="https://doc.rust-lang.org/1.6.0/libc/index.html">libc</a>
crate to copy the string.</p>

<p>NOTE: it&#8217;s responsibility of a caller to ensure, that the buffer size is big enough (at least 30 bytes).</p>

<h2><a name="structs"></a> Dealing with structures</h2>

<h3><a name="representing-a-structure"></a> Representing a structure</h3>

<p>I have the following flat Rust structure <code>Info</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[repr(C)]</span>
</span><span class='line'><span class="n">pub</span> <span class="n">struct</span> <span class="n">Info</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lang</span><span class="o">:</span> <span class="n">Lang</span><span class="p">,</span>
</span><span class='line'>    <span class="n">script</span><span class="o">:</span> <span class="n">Script</span><span class="p">,</span>
</span><span class='line'>    <span class="n">confidence</span><span class="o">:</span> <span class="k">f64</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(where <code>Lang</code> and <code>Script</code> are plain enums), and it easily maps to <code>whatlang_info</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">whatlang_info</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">lang</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">script</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">confidence</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>It could be slightly more complex with nested structures, but the idea stays the same.</p>

<h3><a name="returning-a-structure"></a> Returning a structure</h3>

<p>I guess it can be done at least in few different approaches.
The way I do it: a function receives a pointer to a preallocated memory for a structure as one of the arguments.</p>

<p>You&#8217;ve already seen <code>whatlang_detect</code> function above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">uint8_t</span> <span class="nf">whatlang_detect</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">text</span><span class="p">,</span> <span class="k">struct</span> <span class="n">whatlang_info</span><span class="o">*</span> <span class="n">info</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>info</code> is pointer, where result must be written in case of success (<code>0</code> is returned).</p>

<p>Another way to do this is to return a pointer directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">whatlang_info</span><span class="o">*</span> <span class="nf">whatlang_get_info</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case Rust function must return boxed structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[no_mangle]</span>
</span><span class='line'><span class="n">pub</span> <span class="n">extern</span> <span class="k">fn</span> <span class="n">whatlang_get_info</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">Info</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">info</span> <span class="o">=</span> <span class="n">Info</span> <span class="p">{</span> <span class="n">lang</span><span class="o">:</span> <span class="n">Lang</span><span class="o">::</span><span class="n">Ukr</span><span class="p">,</span> <span class="n">script</span><span class="o">:</span> <span class="n">Script</span><span class="o">::</span><span class="n">Cyrillic</span><span class="p">,</span> <span class="n">confidence</span><span class="o">:</span> <span class="m">0.9</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">Box</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NOTE: In this approach the memory for the structure is allocated by Rust, but it&#8217;s responsibility of
C program to free it.</p>

<h2><a name="complex-enums"></a> Complex enums?</h2>

<p>There is also some thing, that I am actually not aware how do properly:
<strong>how to represent complex Rust enum in C?</strong></p>

<p>Therefore I also don&#8217;t know how gracefully represent <code>Result&lt;T,E&gt;</code> and <code>Option&lt;T&gt;</code>
types.</p>

<p>Maybe, it&#8217;s not actually necessary. For know as a workaround my function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">uint8_t</span> <span class="nf">whatlang_detect</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">text</span><span class="p">,</span> <span class="k">struct</span> <span class="n">whatlang_info</span><span class="o">*</span> <span class="n">info</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>returns <code>0</code> in case of <code>Some</code> and <code>1</code> in case of <code>None</code>. It writes
a result to preallocated memory by a given pointer <code>info</code>.</p>

<p>But I would appreciate if you share some other insights about this.</p>

<p>There are also some things, that are not covered in this article like tuples and arrays.
But you may get some ideas from this <a href="http://pramode.in/2016/09/13/using-unsafe-tricks-in-rust/">article</a>.</p>

<h2><a name="conclusion"></a> Conclusion</h2>

<p>It was shown how to create C bindings for a Rust library.
It may not be something, that you would do often, but having such option is always nice.
It means also, that Rust libraries may be ported to plenty other languages that has FFI support,
and this sounds really cool!</p>

<p>Thanks for reading. Below you&#8217;ll find some useful links that helped me during this investigation.</p>

<p>UPDATE:</p>

<p>People on Reddit gave me a very good constructive feedback. Some things I did wrong
here and I highly recommend you to read this <a href="https://www.reddit.com/r/rust/comments/6sosp0/porting_a_rust_library_to_c/dleg19i/">comment</a>
in addition.</p>

<h2><a name="links"></a> Links</h2>

<ul>
<li><a href="https://doc.rust-lang.org/book/first-edition/ffi.html">The Rust Book, Foreign Function Interface</a> - section in the first edition for The Rust book, about how to do FFI.</li>
<li><a href="https://doc.rust-lang.org/nomicon/">The Nomicon book</a> - entire book dedicated to unsafe programming in Rust.</li>
<li><a href="https://doc.rust-lang.org/libc/x86_64-unknown-linux-gnu/libc/index.html">LibC</a> - a crate, that allows to call C function from Rust. You&#8217;ll find here C type definitions, constants and standard functions.</li>
<li><a href="https://thefullsnack.com/en/string-ffi-rust.html">Rust FFI: Sending strings to the outside world</a> - this article explains how to expose Rust strings for NodeJS.</li>
<li><a href="https://mgattozzi.github.io/2016/10/01/haskell-rust.html">FFI with Haskell and Rust</a> - yet another blog article about FFI</li>
<li><a href="http://pramode.in/2016/09/13/using-unsafe-tricks-in-rust/">Using unsafe tricks to examine Rust data structure layout</a></li>
<li><a href="https://medium.com/jim-fleming/complex-types-with-rust-s-ffi-315d14619479">Complex types with Rust’s FFI</a></li>
<li><a href="https://github.com/kaegi/netinfo-ffi">netinfo-ffi</a> - was my initial source of inspiration, where I could find some examples.</li>
<li><a href="whatlang-ffi">https://github.com/greyblake/whatlang-ffi</a> - whatlang C bindings described in this post</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Rust whatlang library and natural language identification algorithms]]></title>
    <link href="http://greyblake.com/blog/2017/07/30/introduction-to-rust-whatlang-library-and-natural-language-identification-algorithms/"/>
    <updated>2017-07-30T14:03:00+02:00</updated>
    <id>http://greyblake.com/blog/2017/07/30/introduction-to-rust-whatlang-library-and-natural-language-identification-algorithms</id>
    <content type="html"><![CDATA[<p>I&#8217;d like to announce a new Rust library <a href="https://github.com/greyblake/whatlang-rs">whatlang</a>.
Its purpose is to detect natural languages by a given text. Let me show you a quick example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">whatlang</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">whatlang</span><span class="o">::</span><span class="n">detect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// A sentence in German</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Das ist einfach Deutsch.&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Detect langauge and unwrap the infromation</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">info</span> <span class="o">=</span> <span class="n">detect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">text</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print an ISO 639-3 language code (e.g. &quot;eng&quot;, &quot;rus&quot;, &quot;deu&quot;, etc)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Detected language: {:?}&quot;</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">lang</span><span class="p">().</span><span class="n">to_code</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print a script (e.g. &quot;Latin&quot;, &quot;Cyrillic&quot;, &quot;Arabic&quot;, etc)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Script: {:?}&quot;</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">script</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Can we rely on this information?</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Is reliable: {}&quot;</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">is_reliable</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output:</p>

<pre><code>Detected language: deu
Script: Latin
Is reliable: true
</code></pre>

<!--more-->


<p>So, we can see, that library successfully detect short German sentence and we can even trust this information.</p>

<p>You probably noticed, that we had to unwrap info, it&#8217;s because <code>detect</code> function returns <code>Option&lt;Info&gt;</code>.
It may return <code>None</code>, if the text does not contain any valuable information for language detection
(e.g. numbers or punctuations).</p>

<h2>How does it work?</h2>

<p>There are two steps:</p>

<ul>
<li>Identify a script (writing system)</li>
<li>Identify a language based using trigram language profiles</li>
</ul>


<h3>Script identification</h3>

<p>This  part is very simple. We just iterate over the string by characters, and a script that has the most characters in the text is the winner.
Scripts are presented in UTF-8 as non-overlapping unicode blocks.
You can find information about them in the Internet, here is for example Wikipedia article about <a href="https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)">Basic Latin block</a>.</p>

<h3>Trigram based language detection</h3>

<p>You probably know, that every written language has it&#8217;s own statistic characteristics.
For example in English text the most used letters are:</p>

<ul>
<li><code>e</code> - 12.7%</li>
<li><code>t</code> - 9%</li>
<li><code>a</code> - 8.2%</li>
</ul>


<p>And so on. So let&#8217;s say, if we have a big text with frequency of occurrence of &#8220;e&#8221; equal 12.7%, &#8220;t&#8221; equal 9%, and &#8220;a&#8221; equal 8.2%, we may
claim that this text is written in English.</p>

<p>The idea here is similar, but with trigrams.</p>

<h3>What is a trigram?</h3>

<p>A trigram is a particular case of <a href="https://en.wikipedia.org/wiki/N-gram">n-gram</a>, that consists of three items.
Instead of long words, I better give you an example. Let&#8217;s say we have the following text:</p>

<pre><code>love it
</code></pre>

<p>Trigrams for this text would be: <code>_lo</code>, <code>lov</code>, <code>ove</code>, <code>ve_</code>, <code>e_i</code>, <code>_it</code>, <code>it_</code>.
The underscore character <code>_</code> here just represents the word boundaries.</p>

<h3>Still how does it work?</h3>

<p>The library keeps a list of 300 the most frequent trigrams for every language, sorted by frequency. This is called a language profile.
For an input text, we calculate trigrams and sort them by frequency, and after that we compare this with the known language profiles.
The language, that has the most similar profile to the profile of the input text is the winner.
This idea was presented in the whitepaper <a href="http://odur.let.rug.nl/~vannoord/TextCat/textcat.pdf">Cavnar and Trenkle &#8216;94: N-Gram-Based Text Categorization&#8217;</a> and I it&#8217;s a must-read
if one wants to understand some algorithmic details.</p>

<h3>How <em>is_reliable</em> calculated?</h3>

<p>It is based on the following factors:</p>

<ul>
<li>How many unique trigrams are in the given text</li>
<li>How big is the difference between the first and the second(not returned) detected languages? This metric is called <code>rate</code> in the code base.</li>
</ul>


<p>Therefore, it can be presented as a 2D space with threshold functions, that splits it into &#8220;Reliable&#8221; and &#8220;Not reliable&#8221; areas.
This function is a hyperbola and it looks similar to the following one:</p>

<p><img src="https://raw.githubusercontent.com/greyblake/whatlang-rs/master/misc/images/whatlang_is_reliable.png" alt="Whatlang is reliable" /></p>

<p>Meaning, the more unique N-grams are in the given text (which correlates with the text length), the more chances to get reliable result,
which we can trust.</p>

<h2>Advantages and disadvantages of the trigram approach</h2>

<p>Advantages:</p>

<ul>
<li>Simple</li>
<li>Fast</li>
<li>Memory and CPU efficient</li>
<li>Generic approach that works well for all languages regardless the their grammar</li>
</ul>


<p>Disadvantages:</p>

<ul>
<li>May provide falsy results for short texts (smaller than 200-300 letters). Whatlang tries to compensate this with <code>is_reliable</code> attribute.</li>
</ul>


<h2>Alternative approaches</h2>

<p>One of other approaches I know is to split input text by words, and lookup the words in language dictionaries.
This approach may provide better results for short texts, but it&#8217;s much more complex in its implementation and slower.
This would require storing all the words in a database or <a href="https://en.wikipedia.org/wiki/Bloom_filter">bloom filters</a>.</p>

<p>For the best ultimate (and pretty complex) solution one may implement a hybrid appoach: use the trigram algorithm for long texts and use
dictionary lookup for short texts.</p>

<h2>Conclusion</h2>

<p>It was a small introduction to <a href="https://github.com/greyblake/whatlang-rs">whatlang</a> library and language identification algorithms.
For information how to use the library (e.g. set a blacklist languages) please check the <a href="https://docs.rs/whatlang">documentation</a>.</p>

<p>The next step will be porting the library to C language.
There is a <a href="https://github.com/greyblake/whatlang-rs/issues/8">ticket</a> for this.
If I manage to do it, I&#8217;ll write another article.</p>

<p>Thanks for the reading.</p>

<p>P.S. Your feedback is welcome.</p>

<h2>Links</h2>

<ul>
<li><a href="https://github.com/greyblake/whatlang-rs">whatlang (github repo)</a></li>
<li><a href="https://docs.rs/whatlang">whatlang (docs)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)">Basic Latin block</a></li>
<li><a href="https://en.wikipedia.org/wiki/Letter_frequency">Letter Frequency (wikipedia)</a></li>
<li><a href="http://odur.let.rug.nl/~vannoord/TextCat/textcat.pdf">Cavnar and Trenkle &#8216;94: N-Gram-Based Text Categorization&#8217;</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filters (wikipedia)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP, Toki Pona and Ruby. Part 2: language detector]]></title>
    <link href="http://greyblake.com/blog/2015/09/25/nlp-toki-pona-and-ruby-par2-language-detector/"/>
    <updated>2015-09-25T23:55:00+02:00</updated>
    <id>http://greyblake.com/blog/2015/09/25/nlp-toki-pona-and-ruby-par2-language-detector</id>
    <content type="html"><![CDATA[<p>Previous articles:</p>

<ul>
<li><a href="http://greyblake.com/blog/2015/09/20/nlp-toki-pona-and-ruby-part1">Part 1: Intro. Tokenizer</a></li>
</ul>


<p>In the first article we created a simple tokenizer, today we&#8217;re going to create a
language detector to identify Toki Pona text among other texts.</p>

<p>First I want to say that are at least few good libraries for detecting natural languages in ruby:</p>

<ul>
<li><a href="https://github.com/feedbackmine/language_detector">language_detector</a> - detector based on <a href="https://en.wikipedia.org/wiki/N-gram">N-grams</a></li>
<li><a href="https://github.com/peterc/whatlanguage">whatlanguage</a> - detector based on <a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filter</a></li>
</ul>


<p>But those are for mainstream: French, English, German&#8230; We want Toki Pona!
Also, since we are focused on Toki Pona only, we can get much more precise results.</p>

<!--more-->


<h2>The algorithm</h2>

<p>My initial idea was dead simple: since there are only 125 Toki Pona words, we can
simply check whether a token is a Toki Pona word or something else. Then it&#8217;s
easy to calculate a density of Toki Pona words in a given phrase and compare it
against some threshold, where 0 &lt; threshold &lt;= 1.</p>

<p>Here is an example of how such algorithm would work with threshold=0.75 and given
phrase <em>&#8220;mi moka e kala suli&#8221;</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Phrase:   mi   moka   e    kala    suli
</span><span class='line'>Weights:  1    0      1    1       1
</span><span class='line'>
</span><span class='line'>Sum weight: 1 + 0 + 1 + 1 + 1 = 4
</span><span class='line'>Words count: 5
</span><span class='line'>Density: 4 / 5 = 0.8
</span><span class='line'>
</span><span class='line'>0.8 &gt; threshold =&gt; true (it's Toki Pona)</span></code></pre></td></tr></table></div></figure>


<p>The phrase has a typo: instead of word <code>moka</code> there should be word <code>moku</code>.
<em>&#8220;mi moku e kala suli&#8221;</em> means &#8220;I am eating a big fish&#8221;.</p>

<p>I decided to make the algorithm face real data: I picked ~100 random message
from #tokipona IRC channels and split them into three groups:</p>

<ol>
<li>Messages in Toki Pona</li>
<li>Messages in other languages (mostly English)</li>
<li>Mixed messages (half Toki Pona and half English)</li>
</ol>


<p>I wrote a spec, I expected <code>LanguageDetector.toki_pona?(text)</code> to return <code>true</code> for the first group of messages
and <code>false</code> for others. After playing with the value of the threshold, I made it
work almost for all cases.</p>

<p>One of messages looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Moku pona xD</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s obvious that it&#8217;s pure Toki Pona, then what&#8217;s wrong with it?
The issue was in the <code>Tokenizer</code> that we had implemented in the <a href="http://greyblake.com/blog/2015/09/20/nlp-toki-pona-and-ruby-part1">previous article</a>.</p>

<p>For this message it returns 4 tokens: <code>["Moku", "pona", "x", "D"]</code>. While
<code>Moku</code> and <code>pona</code> belong to Toki Pona  vocabulary,  <code>x</code> and <code>D</code> don&#8217;t.</p>

<h2>Updating Tokenizer</h2>

<p>We, as humans, can see that <code>xD</code> actually must be one token, and it&#8217;s not a regular word, but a smile.
So I had to update <code>Tokenizer</code> to distinguish words and smiles.</p>

<p>That&#8217;s the point where I had to introduce the difference between <strong>tokens</strong> and <strong>lexemes</strong>.</p>

<p>As the famous <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">Dragon Book</a> says about lexemes:</p>

<blockquote><p>A lexeme is a sequence of characters in the source program that matches the pattern<br/>for a token and is identified by the lexical analyzer as an instance of that token.</p></blockquote>


<p>And about tokens:</p>

<blockquote><p>A token is a pair consisting of a token name and an optional attribute value.<br/>The token name is an abstract symbol representing a kind of lexical unit, e.g.,<br/>a particular keyword, or sequence of input characters denoting an identifier.<br/>The token names are the input symbols that the parser processes.</p></blockquote>


<p>So I&#8217;ve updated <code>Tokenizer</code> to return array of hashes with <code>:lexeme</code> and <code>:type</code> keys.
By now I have 3 types of tokens: <em>word</em>, <em>smile</em> and <em>punctuation</em>.</p>

<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tokenizer</span><span class="o">.</span><span class="n">tokenize</span> <span class="s2">&quot;moku li ike :(&quot;</span>  <span class="c1"># Translation: food is bad</span>
</span><span class='line'><span class="c1"># =&gt; [ {:lexeme=&gt;&quot;moku&quot;, :type=&gt;:word}, {:lexeme=&gt;&quot;li&quot;, :type=&gt;:word},</span>
</span><span class='line'><span class="c1">#      {:lexeme=&gt;&quot;ike&quot;, :type=&gt;:word}, {:lexeme=&gt;&quot;:/&quot;, :type=&gt;:smile}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation of <code>Tokenizer</code> now is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tokenizer</span>
</span><span class='line'>  <span class="no">SMILE_REGEXP</span> <span class="o">=</span> <span class="sr">/</span>
</span><span class='line'><span class="sr">    (?:</span>
</span><span class='line'><span class="sr">      (?: : | ; | = )                            # eyes</span>
</span><span class='line'><span class="sr">      -?                                         # nose</span>
</span><span class='line'><span class="sr">      (?: \) | \| | \\ | \/ | D | P | p | \* )   # mouth</span>
</span><span class='line'><span class="sr">    ) | (?:x|X)D                                 # other (e.g. XD)</span>
</span><span class='line'><span class="sr">  /x</span>
</span><span class='line'>  <span class="no">WORD_REGEXP</span> <span class="o">=</span> <span class="sr">/\w+/</span>
</span><span class='line'>  <span class="no">PUNCTUATION_REGEX</span> <span class="o">=</span> <span class="sr">/[^\s]*/</span>
</span><span class='line'>  <span class="no">LEXEME_REGEXP</span> <span class="o">=</span> <span class="sr">/</span><span class="si">#{</span><span class="no">SMILE_REGEXP</span><span class="si">}</span><span class="sr">|</span><span class="si">#{</span><span class="no">WORD_REGEXP</span><span class="si">}</span><span class="sr">|</span><span class="si">#{</span><span class="no">PUNCTUATION_REGEX</span><span class="si">}</span><span class="sr">/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">tokenize</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tokenize</span>
</span><span class='line'>    <span class="n">lexemes</span> <span class="o">=</span> <span class="vi">@text</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="no">LEXEME_REGEXP</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lexemes</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">lex</span><span class="o">|</span> <span class="n">lexeme_to_token</span><span class="p">(</span><span class="n">lex</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="k">def</span> <span class="nf">lexeme_to_token</span><span class="p">(</span><span class="n">lexeme</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">lexeme</span><span class="p">:</span> <span class="n">lexeme</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="n">token_type</span><span class="p">(</span><span class="n">lexeme</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="k">def</span> <span class="nf">token_type</span><span class="p">(</span><span class="n">lexeme</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">lexeme</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">SMILE_REGEXP</span> <span class="k">then</span> <span class="ss">:smile</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">WORD_REGEXP</span>  <span class="k">then</span> <span class="ss">:word</span>
</span><span class='line'>    <span class="k">else</span> <span class="ss">:punctuation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now tokenization process contains two stage: detecting lexemes and defining tokens
for those lexemes. Note, that the order of regular expressions in <code>token_type(lexeme)</code>
method is important. Since <code>SMILE_REGEXP</code> and <code>WORD_REGEXP</code> can overlap (e.g. &#8220;XD&#8221;),
we want <code>SMILE_REGEXP</code> to have higher priority. The same with punctuation: everything
what is not a smile or a word we consider as punctuation.</p>

<h2>Levenshtein distance</h2>

<p>So I&#8217;ve I updated the language detection algorithm to count only words. Still
there are number of things to improve.</p>

<p>What if some words are meant to be Toki Pona words but they contain a typo?
Actually we can detect them and adjust the algorithm to count them as well.</p>

<p>So to detect a word with a typo we need somehow to calculate word similarity.
And actually what we need is called <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a>.</p>

<blockquote><p>Levenshtein distance between two words is the minimum number of single-character<br/>edits (i.e. insertions, deletions or substitutions) required to change one word into the other.</p></blockquote>


<p>Levenshtein distance is used in computer science (e.g. for spell checkers), genetics (comparison of gens)
and likely in some other areas. The algorithm isn&#8217;t the simplest one, but is not hard to understand, so
I encourage you to take a look at <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">wikipedia</a> to
uderstand it better.</p>

<p>Now back to our case: how do we measure the difference between words <code>moka</code> and <code>moku</code>?
The levenshtein distance for them is 1, because only one edit needs to be performed to make <code>moka</code> become
<code>moku</code>: replace <code>a</code> with <code>u</code>.</p>

<p>We can implement it based on the algorithm ourself (actually I did it for fun, but then replaced it
with <a href="https://github.com/threedaymonk/text/blob/master/lib/text/levenshtein.rb">this implementation</a>) or google
for existing solutions.
One of suprises was to find it in
<a href="https://github.com/rubygems/rubygems/blob/45966be372d85520630143090b82b455d287cec6/lib/rubygems/text.rb#L42-L72">rubygems</a> gem.
I guess it&#8217;s used when one mistypes name of gem in order to have &#8220;Did you mean &#8230;?&#8221; feature.</p>

<h2>Updating the detection algorithm</h2>

<p>Now, we can adjust the LanguageDetector to be not so strict with typos, and give a word score <code>0.5</code> if it has
levenshtein distance 1 with one of Toki Pona words. Considering the previous example with phrase <em>&#8220;mi moka e kala suli&#8221;</em>,
the density will be 0.9:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Phrase</span><span class="p">:</span>   <span class="n">mi</span>   <span class="n">moka</span>   <span class="n">e</span>    <span class="n">kala</span>    <span class="n">suli</span>
</span><span class='line'><span class="ss">Weights</span><span class="p">:</span>  <span class="mi">1</span>    <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>    <span class="mi">1</span>    <span class="mi">1</span>       <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="no">Sum</span> <span class="ss">weight</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Words</span> <span class="ss">count</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="ss">Density</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="mi">5</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">threshold</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">(</span><span class="n">it</span><span class="err">&#39;</span><span class="n">s</span> <span class="no">Toki</span> <span class="no">Pona</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In reality, apart from the mentioned 125 words, the Toki Pona vocablurary includes names of languages, countries and cities.
So the real detector is slightly more complected. You can check it
<a href="https://github.com/greyblake/tokipona/blob/60d8ec72f2da6af26440239e8cb1f0fed5bea8a5/lib/tokipona/language_detector.rb">here</a>.</p>

<p>Btw, the entire implementation of what is being described can be found as the project at
github <a href="https://github.com/greyblake/tokipona">greyblake/tokipona</a>.</p>

<p>That&#8217;s it for now! In the next part we will try to implement grammar and parser for Toki Pona!</p>

<h2>Links</h2>

<ul>
<li><a href="blog/2015/09/20/nlp-toki-pona-and-ruby-part1">Part 1: implementing Tokenizer</a></li>
<li><a href="http://tokipona.org/">Official Toki Pona site</a></li>
<li><a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance at Wikipedia</a></li>
<li><a href="https://github.com/greyblake/tokipona">My tokipona project at Github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP, Toki Pona and Ruby: part 1]]></title>
    <link href="http://greyblake.com/blog/2015/09/20/nlp-toki-pona-and-ruby-part1/"/>
    <updated>2015-09-20T20:36:00+02:00</updated>
    <id>http://greyblake.com/blog/2015/09/20/nlp-toki-pona-and-ruby-part1</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>During last few years, I spent a lot of time learning foreign languages like Esperanto, Spanish and German.
After a while, I came up with an idea that I can apply this knowledge in computer science.</p>

<p>When I decided this I was completely new to Computational Linguistics(CL) and Natural Language Processing(NLP).
However after reading a number of articles I got some basic ideas.</p>

<h2>What I am gonna do</h2>

<p>To dive into CL/NLP I&#8217;ve decided implement Toki Pona -> English translator from scratch.
It&#8217;s interesting to see which issues I will face and how I will solve them.
It will make me go through number of stages of language processing:</p>

<ul>
<li>Lexical analysis</li>
<li>Language detection (I want to distinguish Toki Pona from other languages)</li>
<li>Morphological analysis (actually will be skipped because of simplicity of Toki Pona)</li>
<li>Syntax analysis</li>
<li>Word translation</li>
<li>Syntax tree conversion</li>
<li>Generation of final translation with respect to English grammar.</li>
</ul>


<p>Anyway, this list is not strict, and probably it will be modified in the future.</p>

<h2>What I am not gonna do</h2>

<p>There are many tools and libraries that already exist in Ruby for NLP.
I am not gonna use any of them here neither cover them in the articles.
If you need something like that, please take a look at <a href="https://github.com/diasks2/ruby-nlp">ruby-nlp</a>.
It&#8217;s a document that gathers a variety of NLP tools implemented in ruby.</p>

<!--more-->


<h2>What is Toki Pona?</h2>

<p><a href="https://en.wikipedia.org/wiki/Toki_Pona">Toki Pona</a> is a constructed language created by Sonja Lang in 2001.
What is so special about it? Its vocabulary is limited and contains only <strong>125 words</strong>.
The grammar is regular (anyway there will be some pitfalls). The language itself simple and can be learned in 1-2 nights,
and I believe it allows to express 80-90% of daily human communication. Also, it has some philosophical background:
speaking the language you realize what things really are.</p>

<p>Example: there is no word like &#8220;friend&#8221;, one would say &#8220;jan pona&#8221;, what literally  means &#8220;good person/human&#8221;.
In similar way &#8220;an ocean&#8221; is &#8220;telo suli&#8221; (big water), &#8220;juice&#8221; is &#8220;telo kili&#8221; (water of fruit or vegetable), etc.</p>

<p>So, even Toki Pona is not real <em>natural</em> language, it&#8217;s good to experiment with, and it gives me some hope that my
goal can be achieved :)</p>

<p>And the end of this article you&#8217;ll find number of useful links if you want to get into the language.</p>

<h2>First step: lexical analysis</h2>

<p>The first step in processing natural or programming language is <strong>lexical analysis</strong>. It means splitting sequence of
characters into some meaningful units: <strong>tokens</strong>. Sometimes the process is called <strong>tokenization</strong> and
the tools that do it are <strong>tokenizers</strong> or <strong>lexical analyzers</strong>.</p>

<p>Let&#8217;s see an example. Given a sentence:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jan suli li pona.</span></code></pre></td></tr></table></div></figure>


<p>Translation: &#8220;Big man is good&#8221;
(<em>jan</em> - human/man, <em>suli</em> - big, <em>li</em> - is/are, <em>pona</em> - good).</p>

<p>Note: in Toki Pona the main word goes first, so noun(<em>jan</em>) is on the first position,
and on the second position is adjective(<em>suli</em>) that modifies the noun.</p>

<p>Expected list of tokens is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s2">&quot;jan&quot;</span><span class="p">,</span> <span class="s2">&quot;suli&quot;</span><span class="p">,</span> <span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="s2">&quot;pona&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s implement class <code>Tokipona::Tokenizer</code> with a class method <code>.tokenize</code> that returns an array of
tokens for a given text. We start with tests first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="ss">Tokipona</span><span class="p">:</span><span class="ss">:Tokenizer</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;.tokenize&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;only words&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;returns array of words&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;toki mi li toki pona&quot;</span>
</span><span class='line'>        <span class="n">tokens</span> <span class="o">=</span> <span class="n">described_class</span><span class="o">.</span><span class="n">tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="s2">&quot;toki&quot;</span><span class="p">,</span> <span class="s2">&quot;mi&quot;</span><span class="p">,</span> <span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="s2">&quot;toki&quot;</span><span class="p">,</span> <span class="s2">&quot;pona&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;words with multiple spaces in between&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;returns array of words&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;toki   mi   li   toki   pona&quot;</span>
</span><span class='line'>        <span class="n">tokens</span> <span class="o">=</span> <span class="n">described_class</span><span class="o">.</span><span class="n">tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="s2">&quot;toki&quot;</span><span class="p">,</span> <span class="s2">&quot;mi&quot;</span><span class="p">,</span> <span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="s2">&quot;toki&quot;</span><span class="p">,</span> <span class="s2">&quot;pona&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;words with special characters&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;returns array of words and characters&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;sina wile lape anu seme, jan lane?&quot;</span>
</span><span class='line'>        <span class="n">tokens</span> <span class="o">=</span> <span class="n">described_class</span><span class="o">.</span><span class="n">tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="s2">&quot;sina&quot;</span><span class="p">,</span> <span class="s2">&quot;wile&quot;</span><span class="p">,</span> <span class="s2">&quot;lape&quot;</span><span class="p">,</span> <span class="s2">&quot;anu&quot;</span><span class="p">,</span> <span class="s2">&quot;seme&quot;</span><span class="p">,</span> <span class="s2">&quot;,&quot;</span><span class="p">,</span> <span class="s2">&quot;jan&quot;</span><span class="p">,</span> <span class="s2">&quot;lane&quot;</span><span class="p">,</span> <span class="s2">&quot;?&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;does not change input text&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;toki mi li pona&quot;</span>
</span><span class='line'>      <span class="n">described_class</span><span class="o">.</span><span class="n">tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;toki mi li pona&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usually lexical analysis for programming languages is based on <a href="http://web.cse.ohio-state.edu/~gurari/course/cse756/html/cse756se2.html">finite-state automata</a>.
But in our simple case we can easily handle it with one regular expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Tokipona</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Tokenizer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@text</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w+|[^\s]/</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation looks very naive, but specs pass, so we leave it as it is.
Probably in the future we will modify.</p>

<h2>Conclusion</h2>

<p>It is the first article and the beginning of the journey. The next step will be an implementation
of Toki Pona language detector. It&#8217;s not necessary to know Toki Pona to follow me,
but in case you are interested, here below I provide some useful links, so you can learn yourself
and start communicating.</p>

<p>I&#8217;ve created a github repository where you can access the code: <a href="https://github.com/greyblake/tokipona">greyblake/tokipona</a>.</p>

<p>P.S.</p>

<p>Thanks for reading. The subject is new for me, so your comments, suggestions and feedback can be very helpful.</p>

<h2>Links</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Toki_Pona">Toki Pona at Wikipedia</a></li>
<li><a href="http://tokipona.org/">Official Toki Pona site</a></li>
<li><a href="http://rowa.giso.de/languages/toki-pona/english/lessons.php">Toki Pona lessons</a> - here you can start learning the language</li>
<li><a href="http://x-raizor.github.io/visual-tokipona/index.html">Toki Pona visual vocabulary</a></li>
<li>#tokipona - IRC channel where you can communicate with other people</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy object pattern in ruby]]></title>
    <link href="http://greyblake.com/blog/2014/10/05/lazy-object-pattern-in-ruby/"/>
    <updated>2014-10-05T21:27:00+02:00</updated>
    <id>http://greyblake.com/blog/2014/10/05/lazy-object-pattern-in-ruby</id>
    <content type="html"><![CDATA[<p>I few days ago my colleague <a href="https://github.com/albertosaurus">Arthur Shagall</a> reviewing my
code suggested me to use <strong>Lazy Object</strong> pattern to postpone some calculations during the load time.
I hadn&#8217;t heard about the pattern before and even googling it didn&#8217;t give my much information.
So I have decided to write this article to cover the topic.</p>

<h2>Intention</h2>

<p><strong>Lazy Object</strong> allows you to postpone some calculation until the moment when the actual
result of the calculation is used. That may help you to speed up booting of the application.</p>

<h2>Implementation</h2>

<p>It is pretty simple. We create a proxy object that takes a calculation
block as its property and execute it on first method call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LazyObject</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">BasicObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">callable</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@callable</span> <span class="o">=</span> <span class="n">callable</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__target_object__</span>
</span><span class='line'>    <span class="vi">@__target_object__</span> <span class="o">||=</span> <span class="vi">@callable</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">__target_object__</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage example 1</h2>

<p>A constant assignment like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SQUARES</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">**</span> <span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Could be converted to this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SQUARES</span> <span class="o">=</span> <span class="no">LazyObject</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">**</span> <span class="mi">2</span><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now if you want to use <code>SQUARES</code> it still behaves like an array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SQUARES</span><span class="o">.</span><span class="n">class</span>  <span class="c1"># =&gt; Array</span>
</span><span class='line'><span class="no">SQUARES</span><span class="o">.</span><span class="n">size</span>   <span class="c1"># =&gt; 10</span>
</span><span class='line'><span class="no">SQUARES</span>        <span class="c1"># =&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage example 2</h2>

<p>Let&#8217;s say you have models <code>State</code> and <code>Address</code> in you Rails application.
What you want do is to validate inclusion of <code>address.state</code> in states.</p>

<p>You can just hardcore the list of states:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Address</span> <span class="o">&lt;</span> <span class="o">::</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="no">STATES</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;AL&quot;</span><span class="p">,</span> <span class="s2">&quot;AK&quot;</span><span class="p">,</span> <span class="s2">&quot;AZ&quot;</span><span class="p">,</span> <span class="s2">&quot;AR&quot;</span><span class="p">,</span> <span class="s2">&quot;CA&quot;</span><span class="p">,</span> <span class="s2">&quot;CO&quot;</span><span class="o">]</span>   <span class="c1"># and so on</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">inclusion</span><span class="p">:</span> <span class="p">{</span> <span class="k">in</span><span class="p">:</span> <span class="no">STATES</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it does not reflect your changes in DB in any way.</p>

<p>Then you can fetch the values from DB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">STATES</span> <span class="o">=</span> <span class="no">State</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems to look better, but there are 2 possible pitfalls:</p>

<ul>
<li>It increases load time (1 more SQL query)</li>
<li>It may cause real troubles if <code>STATES</code> is initialized before <code>State</code> model is seeded. In this case <code>STATES</code> will be empty.</li>
</ul>


<p>So that is the situation where <strong>Lazy Object</strong> is useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">STATES</span> <span class="o">=</span> <span class="no">LazyObject</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="no">State</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:code</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ruby gem</h2>

<p>If your prefer to have it as a ruby gem,
please take a look at <a href="http://rubygems.org/gems/lazy_object">rubygems.org/gems/lazy_object</a>.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ignore files with git locally]]></title>
    <link href="http://greyblake.com/blog/2014/05/21/ignore-files-with-git-locally/"/>
    <updated>2014-05-21T16:37:00+02:00</updated>
    <id>http://greyblake.com/blog/2014/05/21/ignore-files-with-git-locally</id>
    <content type="html"><![CDATA[<p>Sometimes it&#8217;s necessary to ignore some files in a repository only locally.
For rails developers it&#8217;s often <code>./config/database.yml</code> file.
Every developer has his own database configuration.</p>

<p>With git it can be easily achieved, we may instruct git no to track changes in
certain files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git update-index --assume-unchanged ./config/database.yml
</span></code></pre></td></tr></table></div></figure>


<p>Next time we type <code>git status</code> the changes in <code>./config/database.yml</code> won&#8217;t be shown.</p>

<p>If you think you need to track that file again, just do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git update-index --no-assume-unchanged ./config/database.yml
</span></code></pre></td></tr></table></div></figure>


<p>(pay attention to <code>--no</code> prefix).</p>

<p>Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to compare audio in ruby]]></title>
    <link href="http://greyblake.com/blog/2013/12/19/how-to-compare-audio-in-ruby/"/>
    <updated>2013-12-19T19:51:00+01:00</updated>
    <id>http://greyblake.com/blog/2013/12/19/how-to-compare-audio-in-ruby</id>
    <content type="html"><![CDATA[<h2>Or how to implement sound_like RSpec matcher</h2>

<p>The problem I&#8217;m trying to solve in this article is comparison of two
audio files. We&#8217;ll figure out how to verify that they sound similar.</p>

<p>I was developing an application that has a deal with audio processing and
I had to write a test to verify outcome audio file matches a one
from fixtures. Well, I&#8217;ve decided to compare audio binaries like these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;outcome.mp3&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;fixture.mp3&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it worked!</p>

<p>But soon my colleagues let me know I had broken the build. It turned out
that <code>outcome.mp3</code>generated on their Mac books didn&#8217;t match <code>fixture.mp3</code>
generated on my linux laptop, despite the fact that both sounded
absolutely the same. Probably we had different codecs.
So I had to come up with a better idea.</p>

<!--more-->


<h2>Audio fingerprints and Chromaprint</h2>

<p>After some investigation I found a term &#8220;audio fingerprint&#8221; or &#8220;acoustic fingerprint&#8221;,
it was exactly what I was looking for. From Wikipedia:</p>

<blockquote><p>An acoustic fingerprint is a condensed digital summary, deterministically generated
from an audio signal, that can be used to identify an audio sample or quickly locate
similar items in an audio database</p></blockquote>

<p>It&#8217;s used by services like Shazam to identify songs.</p>

<p>So I started looking for open source implementations and found
<a href="http://acoustid.org/chromaprint">Chromaprint</a> - a C library that calculates audio fingerprints
from raw audio files. It seemed to be simple, with good source documentation
and easy to get started.</p>

<h2>Integrate Chromaprint with Ruby</h2>

<p>I found no already existing bindings, so I&#8217;ve implemented
<a href="https://github.com/TMXCredit/chromaprint">my own</a>. Instead of using C,
I gave <a href="https://github.com/ffi/ffi">FFI</a> a shot and it worked perfect!
As result I had stuff that worked the following way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span>     <span class="o">=</span> <span class="ss">Chromaprint</span><span class="p">:</span><span class="ss">:Context</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">44100</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">fingerprint</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">get_fingerprint</span><span class="p">(</span><span class="n">raw_audio_data</span><span class="p">)</span>
</span><span class='line'><span class="n">fingerprint</span><span class="o">.</span><span class="n">raw</span> <span class="c1"># =&gt; [294890785, 328373552, 315802880, 303481088, ...]</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to Chromaprint&#8217;s documentation a raw fingerprint is an array of 4 byte integers.
But how to compare to 2 fingerprints to detect similarity?</p>

<h2>Hamming distance</h2>

<p>The answer was to calculate Hamming distance from binary representation of fingerprints.
Again according to Wikipedia:</p>

<blockquote><p>In information theory, the Hamming distance between two strings of equal length is
the number of positions at which the corresponding symbols are different. In another
way, it measures the minimum number of substitutions required to change one string
into the other, or the minimum number of errors that could have transformed one
string into the other.</p></blockquote>

<p>To calculate Hamming distance for binary data we need to apply XOR operation and count
number of 1 in the result.</p>

<p>Here is a small example for 2 byte values:</p>

<pre><code>dec     bin
11737   00101101 11011001
27129   01101001 11111001

XOR     01000100 00100000

Hamming distance is 3
</code></pre>

<p>Basing on this I implemented an additional method <code>Fingerprint#compare(fingerprint)</code>
that calculates similarity in range from 0 to 1.</p>

<h2>Create RSpec matcher</h2>

<p>Now I could compare raw audio data, but in real world almost always we have to have a deal
with compressed audio like mp3 or ogg. However wav files contain exactly raw audio data.
So I could convert compressed audio to wav, then read it to get raw audio and
calculate fingerprints for comparison. To convert audio I prefer using <code>sox</code>
command line tool, it&#8217;s pretty powerful.</p>

<p>I have to explain that I did it all to avoid having a deal with
audio codecs within ruby, since it would make things be much more complicated.</p>

<p>Finally I got <code>sound_like</code> RSpec matcher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Compare sound of two audio files.</span>
</span><span class='line'><span class="c1"># Based on the Chromaprint library and the +sox+ command like tool.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># @example</span>
</span><span class='line'><span class="c1">#   &quot;/Airborne.mp3&quot;.should sound_like &quot;/ACDC.mp3&quot;</span>
</span><span class='line'><span class="c1">#   &quot;/Children_of_Bodom.mp3&quot;.should_not sound_like &quot;/Britney_Spears.mp3&quot;</span>
</span><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Matchers</span><span class="o">.</span><span class="n">define</span> <span class="ss">:sound_like</span> <span class="k">do</span> <span class="o">|</span><span class="n">expected_file</span><span class="o">|</span>
</span><span class='line'>  <span class="n">match</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">rate</span>      <span class="o">=</span> <span class="mi">96000</span>
</span><span class='line'>    <span class="n">channels</span>  <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">threshold</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">95</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_file</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># Convert input files into raw 16-bit signed audio (WAV) to</span>
</span><span class='line'>      <span class="c1"># process with Chromaprint:</span>
</span><span class='line'>      <span class="n">sox_command</span>    <span class="o">=</span> <span class="s2">&quot;sox %s -e signed -b 16 -t wav - &quot;</span> <span class="p">\</span>
</span><span class='line'>                       <span class="s2">&quot;rate </span><span class="si">#{</span><span class="n">rate</span><span class="si">}</span><span class="s2"> channels </span><span class="si">#{</span><span class="n">channels</span><span class="si">}</span><span class="s2"> 2&gt; /dev/null&quot;</span>
</span><span class='line'>      <span class="n">expected_audio</span> <span class="o">=</span> <span class="sx">%x&quot;</span><span class="si">#{</span><span class="n">sox_command</span> <span class="o">%</span> <span class="o">[</span><span class="n">expected_file</span><span class="o">]</span><span class="si">}</span><span class="sx">&quot;</span>
</span><span class='line'>      <span class="n">audio</span>          <span class="o">=</span> <span class="sx">%x&quot;</span><span class="si">#{</span><span class="n">sox_command</span> <span class="o">%</span> <span class="o">[</span><span class="n">file</span><span class="o">]</span><span class="si">}</span><span class="sx">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Get audio fingerprints:</span>
</span><span class='line'>      <span class="n">chromaprint</span> <span class="o">=</span> <span class="ss">Chromaprint</span><span class="p">:</span><span class="ss">:Context</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">rate</span><span class="p">,</span> <span class="n">channels</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expected_fp</span> <span class="o">=</span> <span class="n">chromaprint</span><span class="o">.</span><span class="n">get_fingerprint</span><span class="p">(</span><span class="n">expected_audio</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fp</span>          <span class="o">=</span> <span class="n">chromaprint</span><span class="o">.</span><span class="n">get_fingerprint</span><span class="p">(</span><span class="n">audio</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Compare fingerprints and compare result against threshold:</span>
</span><span class='line'>      <span class="n">expected_fp</span><span class="o">.</span><span class="n">compare</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">threshold</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I used threshold with value 0.95 because quite rare fingerprints
have 100% match.</p>

<h2>Links</h2>

<ul>
<li><a href="https://github.com/TMXCredit/chromaprint">Chromaprint ruby port on github</a></li>
<li><a href="http://acoustid.org/chromaprint">Chromaprint web page</a></li>
<li><a href="http://en.wikipedia.org/wiki/Acoustic_fingerprint">Acoustic fingerprint in Wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Hamming_distance">Hamming distance in Wikipedia</a></li>
<li><a href="http://stackoverflow.com/a/6397116/1013173">Most efficient way to calculate Hamming distance in ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with fonts in Debian and Ubuntu]]></title>
    <link href="http://greyblake.com/blog/2013/10/08/working-with-fonts-in-debian-and-ubuntu/"/>
    <updated>2013-10-08T00:43:00+02:00</updated>
    <id>http://greyblake.com/blog/2013/10/08/working-with-fonts-in-debian-and-ubuntu</id>
    <content type="html"><![CDATA[<h2>Install fonts</h2>

<p>There are a lot of fonts in standard Debian repository. Packages which contains
fonts starts with <code>fonts-</code>, so lets install them all. Run the next command as
root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-cache search ^fonts- | sed <span class="s1">&#39;s/^\(fonts-[^ ]*\).*$/\1/&#39;</span> | xargs apt-get install
</span></code></pre></td></tr></table></div></figure>


<p>Short explanation of the command:</p>

<ul>
<li><code>apt-cache search ^fonts-</code> - find all packages which starts with <code>fonts-</code>;</li>
<li><code>sed 's/^\(fonts-[^ ]*\).*$/\1/'</code> - filter output to get only package names;</li>
<li><code>xargs apt-get install</code> - pass package names to <code>apt-get install</code> to install them.</li>
</ul>


<h2>Preview fonts</h2>

<p>Now you have more than 1500 fonts, but it&#8217;s hard to pick one that you need, because
it&#8217;s hard to look through all of them. For our luck there exist specials to preview
fonts, and one of is called <code>fontmatrix</code>. Lets install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install fontmatrix
</span></code></pre></td></tr></table></div></figure>


<p>And run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fontmatrix
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i1078.photobucket.com/albums/w484/greyblake/fontmatrix.png" alt="Fontmatrix" /></p>

<p>Now it&#8217;s much easier to select right font!:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to call bash(not shell) from ruby]]></title>
    <link href="http://greyblake.com/blog/2013/09/21/how-to-call-bash-not-shell-from-ruby/"/>
    <updated>2013-09-21T21:53:00+02:00</updated>
    <id>http://greyblake.com/blog/2013/09/21/how-to-call-bash-not-shell-from-ruby</id>
    <content type="html"><![CDATA[<p>Few days ago I was writing a ruby wrapper for <a href="http://sox.sourceforge.net/">SoX</a>
command line tool. To reduce disk IO I wanted to use <a href="http://en.wikipedia.org/wiki/Process_substitution">process substitution</a>.
It&#8217;s a cool shell feature which allows to use command output as an input file for another command.
It&#8217;s pretty useful if the second command doesn&#8217;t work with standard input or you need
to pass more than 1 input.</p>

<p>Let me show the classic example(works in bash and zsh):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat &lt;<span class="o">(</span><span class="nb">echo</span> <span class="s1">&#39;Saluton!&#39;</span><span class="o">)</span> &lt;<span class="o">(</span><span class="nb">echo</span> <span class="s1">&#39;Kiel vi fartas?&#39;</span><span class="o">)</span>
</span><span class='line'><span class="c"># =&gt; Saluton! Kiel vi fartas?</span>
</span></code></pre></td></tr></table></div></figure>


<p>So statement <code>&lt;(echo 'Saluton!')</code> is treated like a file which contains line <code>Saluton!</code>.
Underhood bash(zsh) creates a named pipeline where output of <code>echo 'Saluton!'</code> is written.
Then the named pipeline is passed to <code>cat</code> command.</p>

<p>You can see it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span>  &lt;<span class="o">(</span><span class="nb">echo</span> <span class="s1">&#39;Saluton!&#39;</span><span class="o">)</span>
</span><span class='line'><span class="c"># =&gt; /dev/fd/63</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I wanted to use it in ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="s2">&quot;cat &lt;(echo &#39;Saluton!&#39;) &lt;(echo &#39;Kiel vi fartas?&#39;)&quot;</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But unfortunately it doesn&#8217;t work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">sh</span><span class="p">:</span> <span class="mi">1</span><span class="p">:</span> <span class="no">Syntax</span> <span class="ss">error</span><span class="p">:</span> <span class="s2">&quot;(&quot;</span> <span class="n">unexpected</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that ruby&#8217;s <code>system</code> method and back quotes use<code>sh</code>
not your current shell (which in my case is <code>bash</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span> <span class="s2">&quot;echo $0&quot;</span>
</span><span class='line'><span class="c1"># =&gt; sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>In shells <code>$0</code>points to the current script or to interpreter if you&#8217;re running it interactively.</p>

<p>Fortunately there is a way to create a workaround to run bash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;shellwords&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bash</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>  <span class="n">escaped_command</span> <span class="o">=</span> <span class="no">Shellwords</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;bash -c </span><span class="si">#{</span><span class="n">escaped_command</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bash has option <code>-c</code> which takes bash script to execute.
<a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/shellwords/rdoc/Shellwords.html">Shellwords</a>
is a standard ruby library which provides a method to escape shell commands.</p>

<p>So now it works as we want it to be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bash</span><span class="p">(</span><span class="s2">&quot;echo $0&quot;</span><span class="p">)</span>  <span class="c1"># =&gt; bash</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="s2">&quot;cat &lt;(echo &#39;Saluton!&#39;) &lt;(echo &#39;Kiel vi fartas?&#39;)&quot;</span>
</span><span class='line'><span class="n">bash</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>        <span class="c1"># =&gt; Saluton! Kiel vi fartas?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validation in rails with Themis]]></title>
    <link href="http://greyblake.com/blog/2013/08/19/validation-in-rails-with-themis/"/>
    <updated>2013-08-19T17:21:00+02:00</updated>
    <id>http://greyblake.com/blog/2013/08/19/validation-in-rails-with-themis</id>
    <content type="html"><![CDATA[<p>Sometimes ActiveRecord is not enough to meet complicated validation needs.
At <a href="http://tmxcredit.com/">TMXCredit</a> we&#8217;ve created <a href="https://github.com/TMXCredit/themis">Themis</a> -
ActiveRecord extension which helps to organize validations in a better way and adds
some flexibility. Here I&#8217;m gonna describe some problems which Themis solves after that
I&#8217;ll take a brief look at possible alternative solutions.</p>

<h2>Modular validation</h2>

<p>Themis allows you to extract duplicated validations into module for reuse.
Usually rails applications are small enough so you don&#8217;t need it. But sometimes
you do.</p>

<p>The next example is pretty flat(in real life you probably would use STI or composition to
represent <code>Doctor</code> and <code>Patient</code> models) but it illustrates where Themis could be useful.</p>

<p>Let&#8217;s say you have 2 models:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Doctor</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:diploma</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Patient</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:age</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see that both models have the same validation for <code>first_name</code>, <code>last_name</code> and <code>email</code>.</p>

<p>Themis allows you to fix the duplication problem by extracting common validations into
a module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Module with common validations.</span>
</span><span class='line'><span class="k">module</span> <span class="nn">PersonValidation</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">Themis</span><span class="p">:</span><span class="ss">:Validation</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Doctor</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1"># import validation of first_name, last_name, email</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">PersonValidation</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:diploma</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Patient</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">PersonValidation</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>So now we keep the common validation in one place.
If you want, you can include validation modules into each other to combine
necessary validation.</p>

<h2>Validation scenarios</h2>

<p>Here is another problem which Themis solves.</p>

<p>We have the following models:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:person</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_accounts</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:birhday</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserAccount</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:login</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we have a model graph like this with <code>User</code> model on the top:</p>

<p><img src="http://i1078.photobucket.com/albums/w484/greyblake/themis_model_graph.png" alt="Themis - model graph" /></p>

<p>It&#8217;s pretty small, but in real life the graph can be much deeper.</p>

<p>What would you do if you needed to apply different validations depending on context?
For example according to your business requirements users must be allowed to use
your application only in case if they&#8217;ve filled in all of the fields.
So you need to validate presense of <code>first_name</code>, <code>last_name</code> and <code>birhday</code>
on <code>Person</code> model and <code>email</code>, <code>login</code> and <code>password</code> on <code>UserAccount</code>.</p>

<p>It&#8217;s not a problem, just add the validations to appropriate models:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:layout</span><span class="p">,</span> <span class="ss">:birhday</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserAccount</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:login</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is some percent of users who don&#8217;t finish registration process.
But your marketing department wants to have an ability to contact them
if they have entered an email address.</p>

<p>So that&#8217;s where the issue is: you can&#8217;t save records using validation rules written above.</p>

<p>With Themis you can declare number of validation strategies,
and depending on context, chose which one you need.</p>

<p>Here is how a complete solution looks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:person</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_accounts</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:person</span><span class="p">,</span> <span class="ss">:user_accounts</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Declare validations. Use :full as default.</span>
</span><span class='line'>  <span class="n">has_validation</span> <span class="ss">:full</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">has_validation</span> <span class="ss">:partial</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:birhday</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Declare full validation</span>
</span><span class='line'>  <span class="n">has_validation</span> <span class="ss">:full</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:birhday</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Delcare partial validation. Nothing to validate.</span>
</span><span class='line'>  <span class="n">has_validation</span> <span class="ss">:partial</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserAccount</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:login</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_validation</span> <span class="ss">:full</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:login</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_validation</span> <span class="ss">:partial</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is how you would use it somewhere in a controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Create model initialized with params</span>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:person</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Alex&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:last_name</span>  <span class="o">=&gt;</span> <span class="s2">&quot;DeLarge&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:birhday</span>    <span class="o">=&gt;</span> <span class="s2">&quot;1962&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="ss">:user_accounts</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="p">{</span>
</span><span class='line'>    <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;clockwork@orange.com&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">valid?</span> <span class="c1"># =&gt; false, because login is missing</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Try to apply partial validation</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">use_validation</span><span class="p">(</span><span class="ss">:partial</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">valid?</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># We can save it</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save!</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Alternative solutions</h2>

<p>If you think Themis is overkill for your project, you still have some options.</p>

<h3>Using ActiveSupport::Concern for modularity</h3>

<p><code>ActiveSupport::Concern</code> is another way which allows to extract common validations
into module. Here how would <code>PersonValidation</code> module described above could look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">PersonValidation</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using conditional validation</h3>

<p>If your requirements aren&#8217;t so fancy, you can be satisfied with a simple
conditional validation, e. g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:birhday</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:use_full_validation?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Lets add one more validation statement(for the next example)</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">255</span> <span class="p">},</span>
</span><span class='line'>            <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:use_full_validation?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">use_full_validation?</span>
</span><span class='line'>    <span class="c1"># Some logic goes here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To DRY up <code>:if</code> options it&#8217;s good to use <code>with_options</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">with_options</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:use_full_validation?</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:birhday</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">255</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>:if =&gt; :use_full_validation</code> will be additonaly passed to every method call
on <code>person</code> inside the block.</p>

<h3>Vanguard</h3>

<p>The guys from <a href="http://rom-rb.org/">the ROM project</a> have their own validator called
<a href="https://github.com/mbj/vanguard">Vanguard</a>(previous name is Aqeuitas).
The sweet thing about it is that it allows to seperate validations and
models according to DataMapper approach. The downside is if you use ActiveRecord
you&#8217;ll have a zoo of validation tools. Also it may be still raw and I&#8217;m not sure
is it possible to apply it to solve the described problem, but I&#8217;d encourage
you to take a look at it.</p>

<h2>Conclusion</h2>

<p>ActiveRecord is good for plain and straightforward projects.
In big enterprise applications usually we need more flexibility to meet different
exotic requiments.
We&#8217;ve created <a href="https://github.com/TMXCredit/themis">Themis</a> to extend ActiveRecord
and solve some of the problems.
Actually I hope that <a href="http://rom-rb.org/">ROM</a> will be ready soon and we&#8217;ll
have an ability to select right ORM before diving into development.</p>

<p>Thanks for reading. Hope the article was useful for you and I&#8217;m wating for
your feedback!</p>

<h2>Links</h2>

<ul>
<li><a href="https://github.com/TMXCredit/themis">Themis on Github</a> - you&#8217;ll find here comprehensive documentation in README;</li>
<li><a href="http://guides.rubyonrails.org/active_record_validations.html#conditional-validation">Conditional validation</a> - extraction from Rails Guide;</li>
<li><a href="https://github.com/mbj/vanguard">Vanguard on Github</a> - validator for ROM project;</li>
<li><a href="http://railscasts.com/episodes/42-with-options">Railscast: #42</a> - Ryan Bates describes how <code>with_options</code> works.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Почему я изучаю Эсперанто]]></title>
    <link href="http://greyblake.com/blog/2013/03/30/pochiemu-ia-izuchaiu-esperanto/"/>
    <updated>2013-03-30T01:54:00+01:00</updated>
    <id>http://greyblake.com/blog/2013/03/30/pochiemu-ia-izuchaiu-esperanto</id>
    <content type="html"><![CDATA[<p>Как вы знаете, я начал изучать Эсперанто, некоторым даже успел &#8220;съесть&#8221; мозг, но всё же большинство по-прежнему задают вопросы почему и для чего я это делаю. Из этого можно прийти к выводу, что либо я безумен, либо я понимаю что-то, что другие не могут понять.
Поэтому я решил написать небольшую статью и постараться объясниться.</p>

<!--more-->


<h2>Эсперанто? Зачем?</h2>

<p>Прежде всего, когда я рассказываю друзьям и другим людям про Эсперанто, я встречаю одну из следующих реакций:</p>

<ul>
<li>Зачем? Все ведь все говорят на английском.</li>
<li>Фууу! Как это отвратительно! Искусственный язык!</li>
<li>Так это же мёртвый язык!</li>
<li>Оу! Круто чувак! А я вот нашёл новый рецепт итальянских печенек, пойдём покажу, как они готовятся&#8230; (абстрактный ответ друзей, которые не критикуют, но и не хотят разделять моё новое хобби:) ).</li>
</ul>


<h3>Английский не походит на роль международного языка</h3>

<p>Английский плохо подходит на роль международного языка потому что:
* Он более сложен в изучении, и менее информативен чем Эсперанто.
* Он не является нейтральным языком для всех (люди, для которых этот язык является родным имеют языковое преимущество в переговорах).
* В конце концов английский не всегда был таким популярным (раньше подобное положение занимали французкий и немецкий языки) и не всегда будет. Хотя ему повезло больше, потому что его популярность совпала с развитием цифровых технологий.</p>

<h3>Искусственный язык?</h3>

<p>В искусственных языках нету ничего плохого. Некоторые люди утверждают, что они не являются &#8220;природными&#8221;. Но многие национальные языки подвергались/подвергаются реформам, что тоже не является &#8220;природным&#8221;. К примеру современный турецкий язык появился в 20-х годах 20-го столетия в процессе языковой реформы. Таким образом он является на 40 лет моложе Эсперанто, но это никак не мешает туркам общаться. Другой пример - Нюрнорск, современный литературный норвежский язык. Он был сформирован в 19-ом столетии одним человеком на основе существующих диалектов.</p>

<h3>Мёртвый язык?</h3>

<p>Мёртвый язык - это язык, носителей которого практически не осталось. В мире же по разным подсчётам насчитывают от 100 тысяч до 2-3 миллионов носителей языка. Кроме того издаётся порядка ста периодических изданий, на нём вещают радио, пишут книги, проводят международные встречи.</p>

<p>Более детальные и убедительные аргументы вы можете, при желании, с лёгкостью найти в Интернете.
В частности советую <a href="http://www.youtube.com/watch?v=_YHALnLV9XU">посмотреть видео</a>,
где профессиональный лингвист  Клод Пирон объясняет, почему Эсперанто лучше подходит на роль
международного языка.</p>

<h2>Почему изучаю Эсперанто я</h2>

<p>Теперь я попробую рассказать, о языке более субъективно, о том, как его воспринимаю я.</p>

<p>Первый раз, когда я узнал про Эсперанто(случайно в википедии), я просто удивился. Прочитав несколько грамматических правил за пару минут, я не мог понять, почему люди его не используют! У меня появилось ощущение, что мир движется просто не в том направлении. Люди думают &#8220;я не буду учить этот язык, на нём мало кто разговаривает&#8221;. По моим наблюдениям, люди часто учат какой-нибудь другой национальный язык, но используют его намного меньше, чем эсперантисты используют Эсперанто. Получилось так, что мне хватило идеализма начать изучать это лингвистическое творение (так же, как перейти когда-то на Linux, Vim и т.д.;) ).</p>

<p>Как компьютерный инженер, я просто получаю огромное удовольствие от того, как этот язык устроен. Я бы сказал &#8220;спроектирован&#8221;, но боюсь не всем понравится это слово. Это нечто, сделанное очень хорошо, продумано, сделано таким образом, чтобы этим было максимально удобно и легко пользоваться.</p>

<p>Я воспринимаю Эсперанто, как один из следующих витков развития общества. Когда-то в Европе использовались римские цифры, но в конце концов европейцы устали насиловать свой мозг арифметическими операциями сложения и умножения и перешли на арабские(индийские), работать с которыми намного проще. Надеюсь, нечто подобное произойдёт и с языками.</p>

<p>К тому же идея искусственного языка для международного общения далеко не нова: были языки до появления Эсперанто(Сольресоль, Волаплюк, и т.д.) и после(Идо, Окциденталь, и т.д.). Но Эсперанто - единственный, который прошёл испытание временем и по-прежнему успешно развивается.</p>

<p>Этот язык открывает невероятную возможность для путешествия благодаря <a href="http://ru.wikipedia.org/wiki/Pasporta_Servo">Pasporta Servo</a>.
Кроме этого у Эсперанто есть сообщество - умные и весёлые люди, с которыми просто интересно и приятно общаться =)</p>

<h2>Полезные ссылки</h2>

<p>Если после у вас появилось желание изучать этот удивительный язык, вот несколько интернет-ресурсов, которые могут вам в этом помочь:</p>

<ul>
<li><a href="http://www.kurso.com.br/index.php?ru">Kurso de Esperanto</a> - Замечательный курс в виде компьютерной программы, состоит из 12 уроков. Советую начать с него.</li>
<li><a href="http://lernu.net">Lernu.net</a> - Онлайн курс, переведённый на множество язык в том числе и русский</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install more screensavers on Mate desktop]]></title>
    <link href="http://greyblake.com/blog/2013/02/02/install-more-screensavers-on-mate-desktop/"/>
    <updated>2013-02-02T22:24:00+01:00</updated>
    <id>http://greyblake.com/blog/2013/02/02/install-more-screensavers-on-mate-desktop</id>
    <content type="html"><![CDATA[<p>I switched from Gnome3 to <a href="http://mate-desktop.org/">Mate desktop</a>
and noticed that I&#8217;m able to use only few sreensavers.
If you&#8217;re using Mate (it&#8217;s default for Linux Mint) you might experience the same problem.</p>

<p>There is a workaround how to use much more screensavers with Mate as usually able
to do with Gnome.</p>

<p>Install packages with additional screensavers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install xscreensaver-data-extra xscreensaver-gl-extra</span></code></pre></td></tr></table></div></figure>


<p>Go to <code>/usr/share/applications/screensavers</code> directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /usr/share/applications/screensavers</span></code></pre></td></tr></table></div></figure>


<p>There are located number of <code>.desktop</code> files. You should edit them by replacing the line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OnlyShowIn=GNOME;</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OnlyShowIn=GNOME;MATE;</span></code></pre></td></tr></table></div></figure>


<p>.</p>

<p>Obviously it&#8217;s a routine to change them all manually. So use <code>sed</code> tool to edit all files in once:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -name <span class="s1">&#39;*.desktop&#39;</span> | xargs sed -i <span class="s1">&#39;s/OnlyShowIn=GNOME;/OnlyShowIn=GNOME;MATE;/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you are able to use more than hundred screensavers on Mate!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failed to add new printer in Debian Wheezy]]></title>
    <link href="http://greyblake.com/blog/2013/01/27/failed-to-add-new-printer-in-debian-wheezy/"/>
    <updated>2013-01-27T21:44:00+01:00</updated>
    <id>http://greyblake.com/blog/2013/01/27/failed-to-add-new-printer-in-debian-wheezy</id>
    <content type="html"><![CDATA[<p>After migrating to Debian Wheezy (current test Debian repository) I faced a problem
with installing a local USB printer: on attempt to add new USB printer
(HP LaserJet M1005) I got an error message: &#8220;Failed to add new printer in Debian Wheezy&#8221;
(&#8220;Не удалось добавить новый принтер&#8221; if you have Russian localization).</p>

<p>After googling for I a while I found a good workaround for it. All you need is
to use <code>pk-helper</code> package from Sid (unstable Debian version), since it seems to
be buggy in Wheezy.</p>

<p>So add Sid repository to your <code>/etc/apt/source.list</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deb http://ftp.ua.debian.org/debian/ sid main non-free contrib</span></code></pre></td></tr></table></div></figure>


<p>And reinstall <code>cups-pk-helper</code> package using Sid repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude reinstall cups-pk-helper --target sid</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all. Now try to connect your USB printer.
Btw, there is the <a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=695131">bug report</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rational can't be coerced into BigDecimal in ruby 1.9.3]]></title>
    <link href="http://greyblake.com/blog/2012/12/20/rational-cant-be-coerced-into-bigdecimal-in-ruby-1-dot-9-3/"/>
    <updated>2012-12-20T16:34:00+01:00</updated>
    <id>http://greyblake.com/blog/2012/12/20/rational-cant-be-coerced-into-bigdecimal-in-ruby-1-dot-9-3</id>
    <content type="html"><![CDATA[<p>Trying to move a rails application from ruby 1.8.7 to 1.9.3 I ran into coercion
issue of <code>Rational</code> class.</p>

<p>Ruby 1.9.3:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bigdecimal&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rational&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can multiply Rational against BigDecimal</span>
</span><span class='line'><span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="no">BigDecimal</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; &lt;BigDecimal:a566d0,&#39;0.1E1&#39;,9(36)&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># But you can&#39;t do the same when you change order</span>
</span><span class='line'><span class="no">BigDecimal</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span> <span class="o">*</span> <span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># =&gt; TypeError: Rational can&#39;t be coerced into BigDecimal</span>
</span></code></pre></td></tr></table></div></figure>


<p>On other hand in Ruby 1.8.7:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bigdecimal&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rational&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># BigDecimal * Rational works OK</span>
</span><span class='line'><span class="no">BigDecimal</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span> <span class="o">*</span> <span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># =&gt; 1.0 (Float)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># But Rational * BigDecimal doesn&#39;t</span>
</span><span class='line'><span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="no">BigDecimal</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; TypeError: Rational can&#39;t be coerced into BigDecimal</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s looks weird. So I can only say for sure that <code>Rational</code> -> <code>BigDecimal</code>
coercion is not implemented in Ruby.</p>

<p>I&#8217;ve tried to fix it with simple monkey patch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Works only for Ruby1.9.3</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Rational</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">coerce</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">BigDecimal</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">self</span><span class="p">,</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it works OK against simple examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="no">BigDecimal</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; &lt;BigDecimal:a566d0,&#39;0.1E1&#39;,9(36)&gt;</span>
</span><span class='line'><span class="no">BigDecimal</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span> <span class="o">*</span> <span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># =&gt; &lt;BigDecimal:a566d0,&#39;0.1E1&#39;,9(36)&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it causes intermittent segmentation faults when I run Rails application.</p>

<p>Any ideas about the coercion? Is it expected behaviour of ruby1.9.3?
I found no bugs reported this issue on
<a href="bugs.ruby-lang.org">https://bugs.ruby-lang.org</a>.</p>

<p>I&#8217;ll appreciate any feedback. Thanks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom expectations with RSpec]]></title>
    <link href="http://greyblake.com/blog/2012/12/14/custom-expectations-with-rspec/"/>
    <updated>2012-12-14T00:34:00+01:00</updated>
    <id>http://greyblake.com/blog/2012/12/14/custom-expectations-with-rspec</id>
    <content type="html"><![CDATA[<p>I know you love RSpec&#8217;s <code>expect</code> DSL like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span> <span class="p">{</span> <span class="k">raise</span><span class="p">(</span><span class="s2">&quot;Boom!&quot;</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">RuntimeError</span><span class="p">,</span> <span class="s2">&quot;Boom!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We often write our own custom matchers and I wanna show how is easy to write
custom expectation.</p>

<h2>Desired DSL</h2>

<p>Usually when I do things like this I start with DSL. I think it&#8217;s important since
it must be convenient to use and easy to read.
So turn on your imagination and spend some time on it.</p>

<p>In my example I&#8217;m gonna create an expectation to test text written to standard output
and standard error.
There are samples how I wanna use it(desired DSL):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Test text written to standard output</span>
</span><span class='line'><span class="n">expect</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello!&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">write</span><span class="p">(</span><span class="s2">&quot;Hello!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Test text written to standard error</span>
</span><span class='line'><span class="n">expect</span> <span class="p">{</span> <span class="nb">warn</span> <span class="s2">&quot;Stop it!&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">write</span><span class="p">(</span><span class="s2">&quot;Stop it!&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="ss">:error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>Expectation</h2>

<p>I bet you&#8217;ve already created number of custom matchers. What about custom expectations?
They are usual custom matches which test blocks of code!</p>

<p>I&#8217;m gonna locate the expectation in <code>spec/support/custom_expectations/write_expectation.rb</code> file.
I think <code>spec/support/custom_expectations/</code> directory is the right place for it since
custom matchers usually are located in <code>spec/support/custom_matchers/</code>.</p>

<p>So finally the expectation looks this way:</p>

<figure class='code'><figcaption><span>spec/support/custom_expectations/write_expectation.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Matchers</span><span class="o">.</span><span class="n">define</span> <span class="ss">:write</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span>
</span><span class='line'>  <span class="n">chain</span><span class="p">(</span><span class="ss">:to</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@io</span> <span class="o">=</span> <span class="n">io</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">match</span> <span class="k">do</span> <span class="o">|</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">io</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:output</span> <span class="k">then</span> <span class="n">fake_stdout</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:error</span>  <span class="k">then</span> <span class="n">fake_stderr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">raise</span><span class="p">(</span><span class="s2">&quot;Allowed values for `to` are :output and :error, got `</span><span class="si">#{</span><span class="n">io</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">`&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="n">include?</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">description</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;write </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2"> </span><span class="si">#{</span><span class="n">io_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">failure_message_for_should</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;expected to </span><span class="si">#{</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">failure_message_for_should_not</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;expected to not </span><span class="si">#{</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Fake STDERR and return a string written to it.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fake_stderr</span>
</span><span class='line'>    <span class="n">original_stderr</span> <span class="o">=</span> <span class="vg">$stderr</span>
</span><span class='line'>    <span class="vg">$stderr</span> <span class="o">=</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="vg">$stderr</span><span class="o">.</span><span class="n">string</span>
</span><span class='line'>  <span class="k">ensure</span>
</span><span class='line'>    <span class="vg">$stderr</span> <span class="o">=</span> <span class="n">original_stderr</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Fake STDOUT and return a string written to it.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fake_stdout</span>
</span><span class='line'>    <span class="n">original_stdout</span> <span class="o">=</span> <span class="vg">$stdout</span>
</span><span class='line'>    <span class="vg">$stdout</span> <span class="o">=</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="vg">$stdout</span><span class="o">.</span><span class="n">string</span>
</span><span class='line'>  <span class="k">ensure</span>
</span><span class='line'>    <span class="vg">$stdout</span> <span class="o">=</span> <span class="n">original_stdout</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># default IO is standard output</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">io</span>
</span><span class='line'>    <span class="vi">@io</span> <span class="o">||=</span> <span class="ss">:output</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># IO name is used for description message</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">io_name</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:output</span> <span class="o">=&gt;</span> <span class="s2">&quot;standard output&quot;</span><span class="p">,</span> <span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s2">&quot;standard error&quot;</span><span class="p">}</span><span class="o">[</span><span class="n">io</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. You can try it against the examples from &#8220;Desired DSL&#8221; section.</p>

<p>Hope that&#8217;s was useful. I look forward for your comments and suggestions. You know I do! =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pg_power - ActiveRecord extension for PostgreSQL]]></title>
    <link href="http://greyblake.com/blog/2012/09/06/pg-power-activerecord-extension-for-postgresql/"/>
    <updated>2012-09-06T23:24:00+02:00</updated>
    <id>http://greyblake.com/blog/2012/09/06/pg-power-activerecord-extension-for-postgresql</id>
    <content type="html"><![CDATA[<p>I am happy to announce that  <a href="http://tmxcredit.com/">TMXCredit</a> released
<a href="https://github.com/TMXCredit/pg_power">pg_power</a> gem - an ActiveRecord extension which
allows to use number of PostgreSQL features with Rails.</p>

<h2>What you can do with pg_power?</h2>

<ul>
<li>Use PostgresSQL schemas in your Rails project.</li>
<li>Add comments to PostgreSQL database with Rails migrations.</li>
<li>Use foreign keys (we imported foreigner functionality and made it schema aware).</li>
<li>Use partial indexes.</li>
<li>Add indexes concurrently.</li>
</ul>


<p>You&#8217;ll find enough documentation in <a href="https://github.com/TMXCredit/pg_power/blob/master/README.markdown">README</a>
file.</p>

<h2>Quick usage example</h2>

<p>Assume you want to create tables <code>countries</code> and <code>languages</code> in <code>demography</code> schema.</p>

<p>At first we need to create <code>demography</code> schema:</p>

<figure class='code'><figcaption><span>db/migrate/create_demography_schema.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateDemographySchema</span> <span class="o">&lt;</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_schema</span> <span class="s1">&#39;demography&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s create tables:</p>

<figure class='code'><figcaption><span>db/migrate/create_demography_languages.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateDemographyLanguages</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="c1"># Create table `languages` in schema `demography`</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="s2">&quot;languages&quot;</span><span class="p">,</span> <span class="ss">:schema</span> <span class="o">=&gt;</span> <span class="s2">&quot;demography&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:code</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add PostgreSQL comments</span>
</span><span class='line'>    <span class="n">set_table_comment</span> <span class="s2">&quot;demography.languages&quot;</span><span class="p">,</span> <span class="s2">&quot;List of languages&quot;</span>
</span><span class='line'>    <span class="n">set_column_comments</span> <span class="s2">&quot;demography.languages&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Full name of language in English&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:code</span> <span class="o">=&gt;</span> <span class="s2">&quot;ISO 639-1 code&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>db/migrate/create_demography_countries.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateDemographyContries</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="c1"># Create table `countries` in schema `demography`</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="s2">&quot;countries&quot;</span><span class="p">,</span> <span class="ss">:schema</span> <span class="o">=&gt;</span> <span class="s2">&quot;demography&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># In real life you likely would have many-to-many associaton</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:language_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add PostgreSQL comments</span>
</span><span class='line'>    <span class="n">set_table_comment</span> <span class="s2">&quot;demography.countries&quot;</span><span class="p">,</span> <span class="s2">&quot;List of world countries&quot;</span>
</span><span class='line'>    <span class="n">set_column_comments</span> <span class="s2">&quot;demography.languages&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:name</span>        <span class="o">=&gt;</span> <span class="s2">&quot;Full name of country in English&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:language_id</span> <span class="o">=&gt;</span> <span class="s2">&quot;Most popular language in the country&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add foreign key and create index on demography.countries.language_id</span>
</span><span class='line'>    <span class="n">add_foreign_key</span><span class="p">(</span><span class="s2">&quot;demography.countries&quot;</span><span class="p">,</span> <span class="s2">&quot;demography.languages&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! Now we need to set table names in models to make ActiveRecord know that
these tables are located in <code>demography</code> schema.</p>

<figure class='code'><figcaption><span>app/models/language.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Language</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">set_table_name</span> <span class="s2">&quot;demography.languages&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will work. But I would recommend you to create module <code>Demography</code> which would represent
<code>demography</code> schema and move those models to it. One more benefit is that you can define
schema prefix in module and models will use it build table name automatically.</p>

<figure class='code'><figcaption><span>app/models/demography.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Demography</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">table_name_prefix</span>
</span><span class='line'>    <span class="s1">&#39;demography.&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/demography/language.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Demography::Language</span>
</span><span class='line'>  <span class="c1"># No need to use set_table_name anymore</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope you will enjoy <a href="https://github.com/TMXCredit/pg_power">pg_power</a>. Let us know what you think!</p>

<p>Thanks. Sergey Potapov.</p>
]]></content>
  </entry>
  
</feed>
