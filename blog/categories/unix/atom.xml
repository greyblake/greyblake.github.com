<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: unix | Sergey Potapov]]></title>
  <link href="http://greyblake.com/blog/categories/unix/atom.xml" rel="self"/>
  <link href="http://greyblake.com/"/>
  <updated>2017-08-20T18:28:45+02:00</updated>
  <id>http://greyblake.com/</id>
  <author>
    <name><![CDATA[Sergey Potapov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pg_power - ActiveRecord extension for PostgreSQL]]></title>
    <link href="http://greyblake.com/blog/2012/09/06/pg-power-activerecord-extension-for-postgresql/"/>
    <updated>2012-09-06T23:24:00+02:00</updated>
    <id>http://greyblake.com/blog/2012/09/06/pg-power-activerecord-extension-for-postgresql</id>
    <content type="html"><![CDATA[<p>I am happy to announce that  <a href="http://tmxcredit.com/">TMXCredit</a> released
<a href="https://github.com/TMXCredit/pg_power">pg_power</a> gem - an ActiveRecord extension which
allows to use number of PostgreSQL features with Rails.</p>

<h2>What you can do with pg_power?</h2>

<ul>
<li>Use PostgresSQL schemas in your Rails project.</li>
<li>Add comments to PostgreSQL database with Rails migrations.</li>
<li>Use foreign keys (we imported foreigner functionality and made it schema aware).</li>
<li>Use partial indexes.</li>
<li>Add indexes concurrently.</li>
</ul>


<p>You'll find enough documentation in <a href="https://github.com/TMXCredit/pg_power/blob/master/README.markdown">README</a>
file.</p>

<h2>Quick usage example</h2>

<p>Assume you want to create tables <code>countries</code> and <code>languages</code> in <code>demography</code> schema.</p>

<p>At first we need to create <code>demography</code> schema:</p>

<p>```ruby db/migrate/create_demography_schema.rb
class CreateDemographySchema &lt; &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_schema 'demography'
</code></pre>

<p>  end
end
```</p>

<p>Now let's create tables:</p>

<p>```ruby db/migrate/create_demography_languages.rb
class CreateDemographyLanguages &lt; ActiveRecord::Migration
  def change</p>

<pre><code># Create table `languages` in schema `demography`
create_table "languages", :schema =&gt; "demography" do |t|
  t.string :name
  t.string :code, :limit =&gt; 2
end

# Add PostgreSQL comments
set_table_comment "demography.languages", "List of languages"
set_column_comments "demography.languages",
    :name =&gt; "Full name of language in English",
    :code =&gt; "ISO 639-1 code"
</code></pre>

<p>  end
end
```</p>

<p>```ruby db/migrate/create_demography_countries.rb
class CreateDemographyContries &lt; ActiveRecord::Migration
  def change</p>

<pre><code># Create table `countries` in schema `demography`
create_table "countries", :schema =&gt; "demography" do |t|
  t.string :name

  # In real life you likely would have many-to-many associaton
  t.integer :language_id
end

# Add PostgreSQL comments
set_table_comment "demography.countries", "List of world countries"
set_column_comments "demography.languages",
    :name        =&gt; "Full name of country in English",
    :language_id =&gt; "Most popular language in the country"

# Add foreign key and create index on demography.countries.language_id
add_foreign_key("demography.countries", "demography.languages")
</code></pre>

<p>  end
end
```</p>

<p>Great! Now we need to set table names in models to make ActiveRecord know that
these tables are located in <code>demography</code> schema.</p>

<p><code>ruby app/models/language.rb
class Language &lt; ActiveRecord::Base
  set_table_name "demography.languages"
end
</code></p>

<p>It will work. But I would recommend you to create module <code>Demography</code> which would represent
<code>demography</code> schema and move those models to it. One more benefit is that you can define
schema prefix in module and models will use it build table name automatically.</p>

<p>```ruby app/models/demography.rb
module Demography
  def self.table_name_prefix</p>

<pre><code>'demography.'
</code></pre>

<p>  end
end
```</p>

<p><code>ruby app/models/demography/language.rb
module Demography::Language
  # No need to use set_table_name anymore
end
</code></p>

<p>I hope you will enjoy <a href="https://github.com/TMXCredit/pg_power">pg_power</a>. Let us know what you think!</p>

<p>Thanks. Sergey Potapov.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powering less to highlight syntax and display line numbers]]></title>
    <link href="http://greyblake.com/blog/2011/09/23/powering-less-to-highlight-syntax-and-display-line-numbers/"/>
    <updated>2011-09-23T17:38:35+02:00</updated>
    <id>http://greyblake.com/blog/2011/09/23/powering-less-to-highlight-syntax-and-display-line-numbers</id>
    <content type="html"><![CDATA[<p>Since I am a command line guy I use <strong>less</strong> tool everywhere and everytime to quickly take a look at files. And quite often those files are different scripts and source code. So, it would be great if syntax was highlighted automatically when I open a file with less. And probably it would be great as well if I saw line numbers.</p>

<!--more-->


<h2>Making less highlight syntax</h2>

<p>It didn't take a long time to find a solution.  There is a pretty tool called <strong>source-highlight</strong>.</p>

<p>It might be exist in standard repository of your system. In Debian like Linux distribution(Debian, Ubuntu, Mint, etc) you can install it with command:</p>

<pre><code>apt-get install source-highlight
</code></pre>

<p>It supports a realy big list of languages(in my case 143) and 12 output formats(esc, html, javadoc, latex, etc). You can use man to get closer with it:</p>

<pre><code>man source-highlight
</code></pre>

<p><strong>source-highlight</strong> package provides a little script which receives a source code file and prints highlighted code. Its path is <code>/usr/share/source-highlight/src-hilite-lesspipe.sh</code>. So we're gonna to use it with <strong>less</strong>.</p>

<p>Fortunately <em>_less</em> is require flexible tool and we can customize it with number of invironment variables. One of them is <code>LESSOPEN</code>. A quote from <code>man less</code>:</p>

<pre><code>LESSOPEN
    Command line to invoke the (optional) input-preprocessor.
</code></pre>

<p>So we can you any pipes to prepare an input for <strong>less</strong>.</p>

<p>Another variable we are going to use is <code>LESS</code>:</p>

<pre><code>LESS
    Options which are passed to less automatically.
</code></pre>

<p>We will use <code>-R</code> option to allow ANSI colors.</p>

<p>So just set up this to variables:</p>

<p><code>bash
export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
export LESS=' -R '
</code></p>

<h2>Making less display line numbers</h2>

<p>To display line numbers just use <code>-N</code> option. If you want <strong>less</strong> to use it everytime add it to <code>LESS</code> variable as well:</p>

<p><code>bash
export LESS=' -RN '
</code></p>

<h2>Make it work everytime</h2>

<p>To make it work in all shell session just add the next code to the end of you <code>$HOME/.bashrc</code> file:</p>

<p>```bash</p>

<h1>syntax highlight for less</h1>

<p>export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
export LESS=' -R -N'</p>

<p>```</p>

<p>Hope this was useful for you. Don't be shy and leave you comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using update-rc.d]]></title>
    <link href="http://greyblake.com/blog/2011/09/18/using-update-rc-d/"/>
    <updated>2011-09-18T21:00:00+02:00</updated>
    <id>http://greyblake.com/blog/2011/09/18/using-update-rc-d</id>
    <content type="html"><![CDATA[<p><code>update-rc.d</code> is tool for adding daemons to /etc/rc[1-6]d files.</p>

<p>If you are using OS with System-V style init scripts you can find you <code>/etc</code> the next directories:</p>

<ul>
<li>rc0.d/</li>
<li>rc1.d/</li>
<li>rc2.d/</li>
<li>rc3.d/</li>
<li>rc4.d/</li>
<li>rc5.d/</li>
<li>rc6.d/</li>
<li>rcS.d/</li>
</ul>


<p>So, what are they for?</p>

<!--more-->


<p>Every directory contains symbol links to daemons located in <code>/etc/init.d/</code>. And every directory represents run level. Usually your system uses third level which means multi user mode with networking. When the system is initializing it starts daemons which have appropriate symbol links in rc3.d.</p>

<p>Here is a short description of every run level:</p>

<ul>
<li><strong>0 (Halt)</strong>  Shuts down the system.</li>
<li><strong>1 (Single-User Mode)</strong>  Mode for administrative tasks.[2][3]</li>
<li><strong>2 (Multi-User Mode)</strong>   Does not configure network interfaces and does not export networks services.[4]</li>
<li><strong>3 (Multi-User Mode with Networking)</strong>   Starts the system normally.[5]</li>
<li><strong>4 (Not used/User-definable)</strong>   For special purposes.</li>
<li><strong>5 (Start the system normally with appropriate display manager.)</strong>   As runlevel 3 + display manager.</li>
<li><strong>6 (Reboot)</strong>    Reboots the system.</li>
</ul>


<p>Usualy you don't need to switch levels, but if you do you should use <code>init</code> command. Take care of what you doing.</p>

<p>OK, take a look at a head of some daemon scripts. For example <code>/etc/init.d/postgresql</code>:</p>

<p>```bash /etc/init.d/postgresql</p>

<h1>!/bin/sh</h1>

<p>set -e</p>

<h3>BEGIN INIT INFO</h3>

<h1>Provides:             postgresql</h1>

<h1>Required-Start:       $local_fs $remote_fs $network $time</h1>

<h1>Required-Stop:        $local_fs $remote_fs $network $time</h1>

<h1>Should-Start:         $syslog</h1>

<h1>Should-Stop:          $syslog</h1>

<h1>Default-Start:        2 3 4 5</h1>

<h1>Default-Stop:         0 1 6</h1>

<h1>Short-Description:    PostgreSQL RDBMS server</h1>

<h3>END INIT INFO</h3>

<p>```</p>

<p>It has a self descriptive comment in an appropriate format. <code>Default-Start</code> section contains numbers of levels which runs postgres daemon. <code>Default-Stop</code> section contains number of levels which should not run PostgreSQL, so when you switch to them PostgreSQL daemon will be stopped.</p>

<p>So, let's assume you have created you own daemon which knows how to process <code>start</code> and <code>stop</code> arguments and want it to run on appropriate levels. You need to create symbol links like these:</p>

<pre><code>/etc/rc1.d/K03postgresql -&gt; ../init.d/postgresql
/etc/rc4.d/S02postgresql -&gt; ../init.d/postgresql
/etc/rc0.d/K03postgresql -&gt; ../init.d/postgresql
/etc/rc2.d/S02postgresql -&gt; ../init.d/postgresql
/etc/rc3.d/S02postgresql -&gt; ../init.d/postgresql
/etc/rc6.d/K03postgresql -&gt; ../init.d/postgresql
/etc/rc5.d/S02postgresql -&gt; ../init.d/postgresql
</code></pre>

<p>By the way prefix <code>K</code> means kill(stop) process and <code>S</code> means start.
It's a little routine work, right? But in case if you have descriptive comment I metioned above you just can use <code>update-rc.d</code> tool. It creates all necessary symbol links based on the comment. So just run:</p>

<pre><code>update-rc.d postgres defaults
</code></pre>

<p>Change <code>postgres</code> with name of your daemon.</p>

<h2>Why?</h2>

<p>Unfortunatly I often forget how this tool is called.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backuping and restoring PostgreSQL databases]]></title>
    <link href="http://greyblake.com/blog/2011/02/04/backuping-and-restoring-postgresql-databases/"/>
    <updated>2011-02-04T23:48:55+01:00</updated>
    <id>http://greyblake.com/blog/2011/02/04/backuping-and-restoring-postgresql-databases</id>
    <content type="html"><![CDATA[<p>Recently I had a deal with backuping data from PostreSQL database. So I want to share two scripts I created, one to backup and one to restore databases.</p>

<p>The first one is for backup:</p>

<p>```bash backup.sh</p>

<h1>!/bin/sh</h1>

<p>BASE_BACKUP_DIR="/backups/postgres/"</p>

<p>timeslot=$(date +"%F_%Hh%Mm%Ss")
backup_dir="${BASE_BACKUP_DIR}/${timeslot}"
databases=$(sudo -u postgres sh -c "psql  -c '\l'" 2> /dev/null | sed \
-n 4,/\eof/p | grep -v rows) | awk '{print $1}' | egrep '<sup>\w')</sup></p>

<p>mkdir -p $backup_dir</p>

<p>for db in $databases; do</p>

<pre><code>sudo -u postgres sh -c "pg_dump -C ${db}" 2&gt; /dev/null | xz -9e &gt; $backup_dir/$db.xz
</code></pre>

<p>done</p>

<p>```</p>

<p>After executing script you'll have all you database dumps in <code>/backups/postgres/date_time</code> directory compressed with <code>xz</code>. Sure instead of <code>xz</code> you can use <code>gzip</code> or <code>bzip2</code>.</p>

<p>Okay. Now let's take a look at the restore script:</p>

<p>```bash restore.sh</p>

<h1>!/bin/sh</h1>

<p>if [ $# -lt 1 ] ; then</p>

<pre><code>echo "Error: You should specify backup directory path" 1&gt;&amp;2
exit 1
</code></pre>

<p>fi
backup_dir=$1
if [ ! -d $backup_dir ]; then</p>

<pre><code>echo "Error: directory ${backup_dir} does not exist" 1&gt;&amp;2
exit 1
</code></pre>

<p>fi</p>

<p>for db_xz in $backup_dir/*.xz; do</p>

<pre><code>db_name=$(echo $db_xz | sed 's/\.xz$//; s/^.*\///g')
sudo -u postgres sh -c "xz -cd ${db_xz} | psql"
</code></pre>

<p>done</p>

<p>```</p>

<p>It takes one parameter: a path to back directory with *.xz archives.</p>

<p>Both scripts should be executed with with root permissions, cause they use <code>sudo</code> to execute <code>pg_dump</code> and <code>pg_restore</code> commands with <code>postgres</code> user permissions. It allows avoiding asking a password for database. It's not the only way, but I decided to use this one.</p>
]]></content>
  </entry>
  
</feed>
