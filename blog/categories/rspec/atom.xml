<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | Sergey Potapov]]></title>
  <link href="http://greyblake.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://greyblake.com/"/>
  <updated>2018-01-15T23:50:19+01:00</updated>
  <id>http://greyblake.com/</id>
  <author>
    <name><![CDATA[Sergey Potapov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to compare audio in ruby]]></title>
    <link href="http://greyblake.com/blog/2013/12/19/how-to-compare-audio-in-ruby/"/>
    <updated>2013-12-19T19:51:00+01:00</updated>
    <id>http://greyblake.com/blog/2013/12/19/how-to-compare-audio-in-ruby</id>
    <content type="html"><![CDATA[<h2>Or how to implement sound_like RSpec matcher</h2>

<p>The problem I'm trying to solve in this article is comparison of two
audio files. We'll figure out how to verify that they sound similar.</p>

<p>I was developing an application that has a deal with audio processing and
I had to write a test to verify outcome audio file matches a one
from fixtures. Well, I've decided to compare audio binaries like these:</p>

<p><code>ruby
expect(File.read('outcome.mp3')).to eq File.read('fixture.mp3')
</code></p>

<p>And it worked!</p>

<p>But soon my colleagues let me know I had broken the build. It turned out
that <code>outcome.mp3</code>generated on their Mac books didn't match <code>fixture.mp3</code>
generated on my linux laptop, despite the fact that both sounded
absolutely the same. Probably we had different codecs.
So I had to come up with a better idea.</p>

<!--more-->


<h2>Audio fingerprints and Chromaprint</h2>

<p>After some investigation I found a term "audio fingerprint" or "acoustic fingerprint",
it was exactly what I was looking for. From Wikipedia:</p>

<blockquote><p>An acoustic fingerprint is a condensed digital summary, deterministically generated
from an audio signal, that can be used to identify an audio sample or quickly locate
similar items in an audio database</p></blockquote>

<p>It's used by services like Shazam to identify songs.</p>

<p>So I started looking for open source implementations and found
<a href="http://acoustid.org/chromaprint">Chromaprint</a> - a C library that calculates audio fingerprints
from raw audio files. It seemed to be simple, with good source documentation
and easy to get started.</p>

<h2>Integrate Chromaprint with Ruby</h2>

<p>I found no already existing bindings, so I've implemented
<a href="https://github.com/TMXCredit/chromaprint">my own</a>. Instead of using C,
I gave <a href="https://github.com/ffi/ffi">FFI</a> a shot and it worked perfect!
As result I had stuff that worked the following way:</p>

<p><code>ruby
context     = Chromaprint::Context.new(44100, 1)
fingerprint = context.get_fingerprint(raw_audio_data)
fingerprint.raw # =&gt; [294890785, 328373552, 315802880, 303481088, ...]
</code></p>

<p>According to Chromaprint's documentation a raw fingerprint is an array of 4 byte integers.
But how to compare to 2 fingerprints to detect similarity?</p>

<h2>Hamming distance</h2>

<p>The answer was to calculate Hamming distance from binary representation of fingerprints.
Again according to Wikipedia:</p>

<blockquote><p>In information theory, the Hamming distance between two strings of equal length is
the number of positions at which the corresponding symbols are different. In another
way, it measures the minimum number of substitutions required to change one string
into the other, or the minimum number of errors that could have transformed one
string into the other.</p></blockquote>

<p>To calculate Hamming distance for binary data we need to apply XOR operation and count
number of 1 in the result.</p>

<p>Here is a small example for 2 byte values:</p>

<pre><code>dec     bin
11737   00101101 11011001
27129   01101001 11111001

XOR     01000100 00100000

Hamming distance is 3
</code></pre>

<p>Basing on this I implemented an additional method <code>Fingerprint#compare(fingerprint)</code>
that calculates similarity in range from 0 to 1.</p>

<h2>Create RSpec matcher</h2>

<p>Now I could compare raw audio data, but in real world almost always we have to have a deal
with compressed audio like mp3 or ogg. However wav files contain exactly raw audio data.
So I could convert compressed audio to wav, then read it to get raw audio and
calculate fingerprints for comparison. To convert audio I prefer using <code>sox</code>
command line tool, it's pretty powerful.</p>

<p>I have to explain that I did it all to avoid having a deal with
audio codecs within ruby, since it would make things be much more complicated.</p>

<p>Finally I got <code>sound_like</code> RSpec matcher:</p>

<p>```ruby</p>

<h1>Compare sound of two audio files.</h1>

<h1>Based on the Chromaprint library and the +sox+ command like tool.</h1>

<p>#</p>

<h1>@example</h1>

<h1>"/Airborne.mp3".should sound_like "/ACDC.mp3"</h1>

<h1>"/Children_of_Bodom.mp3".should_not sound_like "/Britney_Spears.mp3"</h1>

<p>RSpec::Matchers.define :sound_like do |expected_file|
  match do |file|</p>

<pre><code>rate      = 96000
channels  = 1
threshold = 0.95

if File.exists?(expected_file) &amp;&amp; File.exists?(file)
  # Convert input files into raw 16-bit signed audio (WAV) to
  # process with Chromaprint:
  sox_command    = "sox %s -e signed -b 16 -t wav - " \
                   "rate #{rate} channels #{channels} 2&gt; /dev/null"
  expected_audio = %x"#{sox_command % [expected_file]}"
  audio          = %x"#{sox_command % [file]}"

  # Get audio fingerprints:
  chromaprint = Chromaprint::Context.new(rate, channels)
  expected_fp = chromaprint.get_fingerprint(expected_audio)
  fp          = chromaprint.get_fingerprint(audio)

  # Compare fingerprints and compare result against threshold:
  expected_fp.compare(fp) &gt; threshold
else
  false
end
</code></pre>

<p>  end
end
```</p>

<p>Note that I used threshold with value 0.95 because quite rare fingerprints
have 100% match.</p>

<h2>Links</h2>

<ul>
<li><a href="https://github.com/TMXCredit/chromaprint">Chromaprint ruby port on github</a></li>
<li><a href="http://acoustid.org/chromaprint">Chromaprint web page</a></li>
<li><a href="http://en.wikipedia.org/wiki/Acoustic_fingerprint">Acoustic fingerprint in Wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Hamming_distance">Hamming distance in Wikipedia</a></li>
<li><a href="http://stackoverflow.com/a/6397116/1013173">Most efficient way to calculate Hamming distance in ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom expectations with RSpec]]></title>
    <link href="http://greyblake.com/blog/2012/12/14/custom-expectations-with-rspec/"/>
    <updated>2012-12-14T00:34:00+01:00</updated>
    <id>http://greyblake.com/blog/2012/12/14/custom-expectations-with-rspec</id>
    <content type="html"><![CDATA[<p>I know you love RSpec's <code>expect</code> DSL like this:</p>

<p><code>ruby
expect { raise("Boom!") }.to raise_error(RuntimeError, "Boom!")
</code></p>

<p>We often write our own custom matchers and I wanna show how is easy to write
custom expectation.</p>

<h2>Desired DSL</h2>

<p>Usually when I do things like this I start with DSL. I think it's important since
it must be convenient to use and easy to read.
So turn on your imagination and spend some time on it.</p>

<p>In my example I'm gonna create an expectation to test text written to standard output
and standard error.
There are samples how I wanna use it(desired DSL):</p>

<p>```ruby</p>

<h1>Test text written to standard output</h1>

<p>expect { puts "Hello!" }.to write("Hello!")</p>

<h1>Test text written to standard error</h1>

<p>expect { warn "Stop it!" }.to write("Stop it!").to(:error)
```</p>

<!--more-->


<h2>Expectation</h2>

<p>I bet you've already created number of custom matchers. What about custom expectations?
They are usual custom matches which test blocks of code!</p>

<p>I'm gonna locate the expectation in <code>spec/support/custom_expectations/write_expectation.rb</code> file.
I think <code>spec/support/custom_expectations/</code> directory is the right place for it since
custom matchers usually are located in <code>spec/support/custom_matchers/</code>.</p>

<p>So finally the expectation looks this way:</p>

<p>```ruby spec/support/custom_expectations/write_expectation.rb
RSpec::Matchers.define :write do |message|
  chain(:to) do |io|</p>

<pre><code>@io = io
</code></pre>

<p>  end</p>

<p>  match do |block|</p>

<pre><code>output =
  case io
  when :output then fake_stdout(&amp;block)
  when :error  then fake_stderr(&amp;block)
  else raise("Allowed values for `to` are :output and :error, got `#{io.inspect}`")
  end
output.include? message
</code></pre>

<p>  end</p>

<p>  description do</p>

<pre><code>"write \"#{message}\" #{io_name}"
</code></pre>

<p>  end</p>

<p>  failure_message_for_should do</p>

<pre><code>"expected to #{description}"
</code></pre>

<p>  end</p>

<p>  failure_message_for_should_not do</p>

<pre><code>"expected to not #{description}"
</code></pre>

<p>  end</p>

<p>  # Fake STDERR and return a string written to it.
  def fake_stderr</p>

<pre><code>original_stderr = $stderr
$stderr = StringIO.new
yield
$stderr.string
</code></pre>

<p>  ensure</p>

<pre><code>$stderr = original_stderr
</code></pre>

<p>  end</p>

<p>  # Fake STDOUT and return a string written to it.
  def fake_stdout</p>

<pre><code>original_stdout = $stdout
$stdout = StringIO.new
yield
$stdout.string
</code></pre>

<p>  ensure</p>

<pre><code>$stdout = original_stdout
</code></pre>

<p>  end</p>

<p>  # default IO is standard output
  def io</p>

<pre><code>@io ||= :output
</code></pre>

<p>  end</p>

<p>  # IO name is used for description message
  def io_name</p>

<pre><code>{:output =&gt; "standard output", :error =&gt; "standard error"}[io]
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>And that's it. You can try it against the examples from "Desired DSL" section.</p>

<p>Hope that's was useful. I look forward for your comments and suggestions. You know I do! =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec matchers for DataMapper (dm-rspec)]]></title>
    <link href="http://greyblake.com/blog/2011/09/12/rspec-matchers-for-datamapper-dm-rspec/"/>
    <updated>2011-09-12T22:25:15+02:00</updated>
    <id>http://greyblake.com/blog/2011/09/12/rspec-matchers-for-datamapper-dm-rspec</id>
    <content type="html"><![CDATA[<p>I am currently developing a number of RSpec matchers for DataMapper models testing. You can try it. Just add the next in your Gemfile under <code>test</code> group:</p>

<pre><code>gem 'dm-rspec'
</code></pre>

<p>And run <code>bundle install</code> to install new gems.</p>

<p>The main idea is to provide the same (almost the same) interface which Shoulda provides to test ActiveRecord models.</p>

<p>At the moment I implemented the next matchers:</p>

<ul>
<li>belong_to</li>
<li>have_many</li>
<li>have_many_and_belong_to</li>
<li>have_property</li>
<li>have(n).errors_on(:property)</li>
<li>have_many(:association).trough(:another_association)</li>
<li>validate_presence_of(:property)</li>
<li>validate_uniqueness_of(:property)</li>
<li>validate_format_of(:property).with(/regexp/)</li>
</ul>


<p>More information you can find on <a href="https://github.com/greyblake/dm-rspec">DataMapper RSpec github page</a>.</p>

<p>Anyone is welcome to join me in developing:)</p>
]]></content>
  </entry>
  
</feed>
