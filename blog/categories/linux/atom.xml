<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Sergey Potapov]]></title>
  <link href="http://greyblake.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://greyblake.com/"/>
  <updated>2013-08-21T01:51:02+03:00</updated>
  <id>http://greyblake.com/</id>
  <author>
    <name><![CDATA[Sergey Potapov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install more screensavers on Mate desktop]]></title>
    <link href="http://greyblake.com/blog/2013/02/02/install-more-screensavers-on-mate-desktop/"/>
    <updated>2013-02-02T22:24:00+02:00</updated>
    <id>http://greyblake.com/blog/2013/02/02/install-more-screensavers-on-mate-desktop</id>
    <content type="html"><![CDATA[<p>I switched from Gnome3 to <a href="http://mate-desktop.org/">Mate desktop</a>
and noticed that I'm able to use only few sreensavers.
If you're using Mate (it's default for Linux Mint) you might experience the same problem.</p>

<p>There is a workaround how to use much more screensavers with Mate as usually able
to do with Gnome.</p>

<p>Install packages with additional screensavers:</p>

<p><code>
apt-get install xscreensaver-data-extra xscreensaver-gl-extra
</code></p>

<p>Go to <code>/usr/share/applications/screensavers</code> directory:</p>

<p><code>
cd /usr/share/applications/screensavers
</code></p>

<p>There are located number of <code>.desktop</code> files. You should edit them by replacing the line</p>

<p><code>
OnlyShowIn=GNOME;
</code></p>

<p>with</p>

<p><code>
OnlyShowIn=GNOME;MATE;
</code>.</p>

<p>Obviously it's a routine to change them all manually. So use <code>sed</code> tool to edit all files in once:</p>

<p><code>sh
find . -name '*.desktop' | xargs sed -i 's/OnlyShowIn=GNOME;/OnlyShowIn=GNOME;MATE;/'
</code></p>

<p>Now you are able to use more than hundred screensavers on Mate!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failed to add new printer in Debian Wheezy]]></title>
    <link href="http://greyblake.com/blog/2013/01/27/failed-to-add-new-printer-in-debian-wheezy/"/>
    <updated>2013-01-27T21:44:00+02:00</updated>
    <id>http://greyblake.com/blog/2013/01/27/failed-to-add-new-printer-in-debian-wheezy</id>
    <content type="html"><![CDATA[<p>After migrating to Debian Wheezy (current test Debian repository) I faced a problem
with installing a local USB printer: on attempt to add new USB printer
(HP LaserJet M1005) I got an error message: "Failed to add new printer in Debian Wheezy"
("Не удалось добавить новый принтер" if you have Russian localization).</p>

<p>After googling for I a while I found a good workaround for it. All you need is
to use <code>pk-helper</code> package from Sid (unstable Debian version), since it seems to
be buggy in Wheezy.</p>

<p>So add Sid repository to your <code>/etc/apt/source.list</code>:</p>

<p><code>
deb http://ftp.ua.debian.org/debian/ sid main non-free contrib
</code></p>

<p>And reinstall <code>cups-pk-helper</code> package using Sid repository:</p>

<p><code>
aptitude reinstall cups-pk-helper --target sid
</code></p>

<p>That's all. Now try to connect your USB printer.
Btw, there is the <a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=695131">bug report</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pg_power - ActiveRecord extension for PostgreSQL]]></title>
    <link href="http://greyblake.com/blog/2012/09/06/pg-power-activerecord-extension-for-postgresql/"/>
    <updated>2012-09-06T23:24:00+03:00</updated>
    <id>http://greyblake.com/blog/2012/09/06/pg-power-activerecord-extension-for-postgresql</id>
    <content type="html"><![CDATA[<p>I am happy to announce that  <a href="http://tmxcredit.com/">TMXCredit</a> released
<a href="https://github.com/TMXCredit/pg_power">pg_power</a> gem - an ActiveRecord extension which
allows to use number of PostgreSQL features with Rails.</p>

<h2>What you can do with pg_power?</h2>

<ul>
<li>Use PostgresSQL schemas in your Rails project.</li>
<li>Add comments to PostgreSQL database with Rails migrations.</li>
<li>Use foreign keys (we imported foreigner functionality and made it schema aware).</li>
<li>Use partial indexes.</li>
<li>Add indexes concurrently.</li>
</ul>


<p>You'll find enough documentation in <a href="https://github.com/TMXCredit/pg_power/blob/master/README.markdown">README</a>
file.</p>

<h2>Quick usage example</h2>

<p>Assume you want to create tables <code>countries</code> and <code>languages</code> in <code>demography</code> schema.</p>

<p>At first we need to create <code>demography</code> schema:</p>

<p>```ruby db/migrate/create_demography_schema.rb
class CreateDemographySchema &lt; &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_schema 'demography'
</code></pre>

<p>  end
end
```</p>

<p>Now let's create tables:</p>

<p>```ruby db/migrate/create_demography_languages.rb
class CreateDemographyLanguages &lt; ActiveRecord::Migration
  def change</p>

<pre><code># Create table `languages` in schema `demography`
create_table "languages", :schema =&gt; "demography" do |t|
  t.string :name
  t.string :code, :limit =&gt; 2
end

# Add PostgreSQL comments
set_table_comment "demography.languages", "List of languages"
set_column_comments "demography.languages",
    :name =&gt; "Full name of language in English",
    :code =&gt; "ISO 639-1 code"
</code></pre>

<p>  end
end
```</p>

<p>```ruby db/migrate/create_demography_countries.rb
class CreateDemographyContries &lt; ActiveRecord::Migration
  def change</p>

<pre><code># Create table `countries` in schema `demography`
create_table "countries", :schema =&gt; "demography" do |t|
  t.string :name

  # In real life you likely would have many-to-many associaton
  t.integer :language_id
end

# Add PostgreSQL comments
set_table_comment "demography.countries", "List of world countries"
set_column_comments "demography.languages",
    :name        =&gt; "Full name of country in English",
    :language_id =&gt; "Most popular language in the country"

# Add foreign key and create index on demography.countries.language_id
add_foreign_key("demography.countries", "demography.languages")
</code></pre>

<p>  end
end
```</p>

<p>Great! Now we need to set table names in models to make ActiveRecord know that
these tables are located in <code>demography</code> schema.</p>

<p><code>ruby app/models/language.rb
class Language &lt; ActiveRecord::Base
  set_table_name "demography.languages"
end
</code></p>

<p>It will work. But I would recommend you to create module <code>Demography</code> which would represent
<code>demography</code> schema and move those models to it. One more benefit is that you can define
schema prefix in module and models will use it build table name automatically.</p>

<p>```ruby app/models/demography.rb
module Demography
  def self.table_name_prefix</p>

<pre><code>'demography.'
</code></pre>

<p>  end
end
```</p>

<p><code>ruby app/models/demography/language.rb
module Demography::Language
  # No need to use set_table_name anymore
end
</code></p>

<p>I hope you will enjoy <a href="https://github.com/TMXCredit/pg_power">pg_power</a>. Let us know what you think!</p>

<p>Thanks. Sergey Potapov.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Firefox (Iceweasel) 7 on Debian Squeeze]]></title>
    <link href="http://greyblake.com/blog/2011/10/03/how-to-install-firefox-iceweasel-7-on-debian-squeeze/"/>
    <updated>2011-10-03T18:12:54+03:00</updated>
    <id>http://greyblake.com/blog/2011/10/03/how-to-install-firefox-iceweasel-7-on-debian-squeeze</id>
    <content type="html"><![CDATA[<p>First remove lagacy version of Iceweasel:</p>

<pre><code>aptitude remove iceweasel
</code></pre>

<p>Create <code>/etc/apt/sources.list.d/squeeze-backports.list</code> file:</p>

<pre><code># New Mozilla packages for Squeeze
deb http://mozilla.debian.net/ squeeze-backports iceweasel-release
deb http://backports.debian.org/debian-backports squeeze-backports main
</code></pre>

<p>Then run:</p>

<pre><code>aptitude update
aptitude install iceweasel -t squeeze-backports
</code></pre>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powering less to highlight syntax and display line numbers]]></title>
    <link href="http://greyblake.com/blog/2011/09/23/powering-less-to-highlight-syntax-and-display-line-numbers/"/>
    <updated>2011-09-23T17:38:35+03:00</updated>
    <id>http://greyblake.com/blog/2011/09/23/powering-less-to-highlight-syntax-and-display-line-numbers</id>
    <content type="html"><![CDATA[<p>Since I am a command line guy I use <strong>less</strong> tool everywhere and everytime to quickly take a look at files. And quite often those files are different scripts and source code. So, it would be great if syntax was highlighted automatically when I open a file with less. And probably it would be great as well if I saw line numbers.</p>

<!--more-->


<h2>Making less highlight syntax</h2>

<p>It didn't take a long time to find a solution.  There is a pretty tool called <strong>source-highlight</strong>.</p>

<p>It might be exist in standard repository of your system. In Debian like Linux distribution(Debian, Ubuntu, Mint, etc) you can install it with command:</p>

<pre><code>apt-get install source-highlight
</code></pre>

<p>It supports a realy big list of languages(in my case 143) and 12 output formats(esc, html, javadoc, latex, etc). You can use man to get closer with it:</p>

<pre><code>man source-highlight
</code></pre>

<p><strong>source-highlight</strong> package provides a little script which receives a source code file and prints highlighted code. Its path is <code>/usr/share/source-highlight/src-hilite-lesspipe.sh</code>. So we're gonna to use it with <strong>less</strong>.</p>

<p>Fortunately <em>_less</em> is require flexible tool and we can customize it with number of invironment variables. One of them is <code>LESSOPEN</code>. A quote from <code>man less</code>:</p>

<pre><code>LESSOPEN
    Command line to invoke the (optional) input-preprocessor.
</code></pre>

<p>So we can you any pipes to prepare an input for <strong>less</strong>.</p>

<p>Another variable we are going to use is <code>LESS</code>:</p>

<pre><code>LESS
    Options which are passed to less automatically.
</code></pre>

<p>We will use <code>-R</code> option to allow ANSI colors.</p>

<p>So just set up this to variables:</p>

<p><code>bash
export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
export LESS=' -R '
</code></p>

<h2>Making less display line numbers</h2>

<p>To display line numbers just use <code>-N</code> option. If you want <strong>less</strong> to use it everytime add it to <code>LESS</code> variable as well:</p>

<p><code>bash
export LESS=' -RN '
</code></p>

<h2>Make it work everytime</h2>

<p>To make it work in all shell session just add the next code to the end of you <code>$HOME/.bashrc</code> file:</p>

<p>```bash</p>

<h1>syntax highlight for less</h1>

<p>export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
export LESS=' -R -N'</p>

<p>```</p>

<p>Hope this was useful for you. Don't be shy and leave you comments.</p>
]]></content>
  </entry>
  
</feed>
