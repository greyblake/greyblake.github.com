<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: activerecord, | Sergey Potapov]]></title>
  <link href="http://greyblake.com/blog/categories/activerecord-/atom.xml" rel="self"/>
  <link href="http://greyblake.com/"/>
  <updated>2018-02-18T19:58:41+01:00</updated>
  <id>http://greyblake.com/</id>
  <author>
    <name><![CDATA[Sergey Potapov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Тестируем вложенные ActiveRecord-модели с RSpec]]></title>
    <link href="http://greyblake.com/blog/2012/07/06/tiestiruiem-vlojenie-activerecord-modeli-s-rspec/"/>
    <updated>2012-07-06T22:19:00+02:00</updated>
    <id>http://greyblake.com/blog/2012/07/06/tiestiruiem-vlojenie-activerecord-modeli-s-rspec</id>
    <content type="html"><![CDATA[<p>Иногда бывает так, что вам нужно построить большой граф вложенных объектов,
и конечно же протестировать, что ваш "builder" работает так, как нужно. На самом деле
задача элементарная, но я всё же попробую поискать наиболее элегантный путь её решения.</p>

<!--more-->


<p>Расмотрим следующий пример, когда у нас есть три небольшие модели: User, Account, Preference.
(На практике обычно моделей намного больше с большим количеством свойств).</p>

<p>```ruby user.rb
class User &lt; ActiveRecord::Base
  attr_accessible :last_name, :first_name</p>

<p>  has_one :account
end
```</p>

<p>```ruby account.rb
class Account &lt; ActiveRecord::Base
  attr_accessible :email, :last_visit_date</p>

<p>  belongs_to :user
  has_one :preference
end
```</p>

<p>```ruby preference.rb
class Preference &lt; ActiveRecord::Base
  attr_accessible :language, :weapon</p>

<p>  belongs_to :user
end
```</p>

<p>Предположим у нас есть некий builder, который строит объект User и все завимимые
модели(Account и Preference). Всё что мы хотим сделать - это протестировать,
что граф объектов построен правильно.</p>

<p>Вот пример реализации стандартного rspec-теста, который первым приходит на ум:</p>

<p>```ruby user_builder_spec.rb
describe UserBuilder do
  describe '#build' do</p>

<pre><code>describe 'user' do
  let(:user) { described_class.new(some_attrs).build }
  subject { user }

  its(:first_name) { should == "Rodion"      }
  its(:last_name)  { should == "Raskolnikov" }

  describe 'account' do
    subject { user.account }

    its(:email)           { should == "rodion@mail.ru"       }
    its(:last_visit_date) { should == Date.new(1866, 11, 27) }

    describe 'preference' do
      subject { user.account.preference }

      its(:language) { should == "Russian" }
      its(:weapon)   { should == "ax"      }
    end
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Всё читаемо, красиво и просто. Но проблема в том, что получилось шесть тестов(по тесту на
каждый атрибут), которые тестируют лишь одно действие - постороение объекта. Когда операция построения
занимает немало времени, а количество атрибутов на порядок больше, такой подход
становится далеко не самым лучшим, поскольку возрастает время выполнения.
Если объект не сохраняется в базе то вполне разумным будет использовать <code>before :all</code>. Но если
вам приходится сохранять объект и вы используете опцию <code>config.use_transactional_fixtures = true</code>,
потому что не хотите "гадить" в базу, то этот вариант не подойдёт.</p>

<p>Можно пойти по пути классического unit-тестирования и сделать тест подобным этому:</p>

<p>```ruby user_builder_spec.rb
describe UserBuilder do
  describe '#build' do</p>

<pre><code>let(:user) { described_class.new(some_attrs).build }

it 'should correctly build a user' do
  user.first_name.should == "Rodion"
  user.last_name.should  == "Raskolnikov"
  user.account.email.should           == "rodion@mail.ru"
  user.account.last_visit_date.should == Date.new(1866, 11, 27)
  user.account.preference.language.should == "Russian"
  user.account.preference.weapon.should   == "ax"
end
</code></pre>

<p>  end
end
```</p>

<p>Получилось даже лаконичнее, но менее читаемо(уж когда будет больше вложенность объектов,
будет точно менее читаемо). Так же раздрожает длинные цепочки одинаковых методов.</p>

<p>Помедитировав над проблемой, я нашёл компроммиссное решение на основе метода <code>instance_eval</code>.</p>

<p>```ruby user_builder_spec.rb
describe UserBuilder do
  describe '#build' do</p>

<pre><code>let(:user) { described_class.new(some_attrs).build }

it 'should correctly build a user' do
  user.instance_eval do
    first_name.should == "Rodion"
    last_name.should  == "Raskolnikov"

    account.instance_eval do
      email.should           == "rodion@mail.ru"
      last_visit_date.should == Date.new(1866, 11, 27)

      preference.instance_eval do
        language.should == "Russian"
        weapon.should   == "ax"
      end
    end
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Это по-прежнему один тест, но мы избавились от длинных цепочек методов.
Нужно заметить, что у такого подхода есть тоже свои недостатки: используя <code>instance_eval</code>
мы покидаем контекст теста, и переходим прямо в контекст объекта, в котором не существует методов подобных
<code>be_valid</code>, <code>be_instance_of</code>, etc.</p>

<p>Надеюсь, эта идея будет вам полезной. Буду рад узнать чужое мнение.</p>
]]></content>
  </entry>
  
</feed>
